
// ==== src/assets/assets.js ====
export const Images = {
  logoLight: require('./images/logo-light.png'), // for light theme
  logoDark: require('./images/logo-dark.png'),   // for dark theme
  backgroundEffect: require('./images/background-effect.png'),
  onboarding1: require('./images/onboarding-1.png'),
  onboarding2: require('./images/onboarding-2.png'),
  onboarding3: require('./images/onboarding-3.png'),
  accountCreated: require('./images/account-created.png'),
  lyft: require('./images/lyft.png'),
  uber: require('./images/uber.png'),
  doorDash: require('./images/door-dash.png'),
  forgotModal: require('./images/forgot-modal.png'),
  uberOnboarding: require('./images/uber-onboarding.png'),
  setupPicture: require('./images/setup-picture.png'),
  accessibility: require('./images/accessibility.png'),
  lyftOnboarding: require('./images/lyft-onboarding.png'),
  doorDashOnboarding: require('./images/door-dash-onboarding.png'),
  userProfile: require('./images/user-profile.png'),
    masterplanBackground: require('./images/masterplan-bg.png'), 
    cardBackground: require('./images/card-background.png'),
};

export const Icons = {
  check: require('./icons/check.png'),
  uncheck: require('./icons/uncheck.png'),
  flagUK: require('./icons/flags/uk.png'),
  flagSpain: require('./icons/flags/spain.png'),
  flagTurkey: require('./icons/flags/turkey.png'),
  arrow: require('./icons/arrow.png'),
  mail: require('./icons/mail.png'),
  lock: require('./icons/lock.png'),
  eyeOpen: require('./icons/eye-open.png'),
  eyeClose: require('./icons/eye-close.png'),
  google: require('./icons/google.png'),
  apple: require('./icons/apple.png'),
  back: require('./icons/header-back.png'),
  person: require('./icons/person.png'),
  phone: require('./icons/phone.png'),
  vehicle: require('./icons/vehicle.png'),
  calendar: require('./icons/calendar.png'),
  lock: require('./icons/lock.png'),
  camera: require('./icons/camera.png'),
  bottomMail: require('./icons/bottom-mail.png'),
  bottomPassword: require('./icons/bottom-password.png'),
  bottomPhone: require('./icons/bottom-phone.png'),
  license: require('./icons/license.png'),
  bottomHome: require('./icons/bottom-home.png'),
  bottomHomeSelected: require('./icons/bottom-home-selected.png'),
  bottomAutomation: require('./icons/bottom-automation.png'),
  bottomAutomationSelected: require('./icons/bottom-automation-selected.png'),
  bottomHistory: require('./icons/bottom-history.png'),
  bottomHistorySelected: require('./icons/bottom-history-selected.png'),
  bottomEarning: require('./icons/bottom-earning.png'),
  bottomEarningSelected: require('./icons/bottom-earning-selected.png'),
  bottomPlay: require('./icons/bottom-play.png'),
  bottomPause: require('./icons/bottom-pause.png'),
  darkHeaderProfile: require('./icons/dark-header-profile.png'),
  darkHeaderNotification: require('./icons/dark-header-notification.png'),
  lightHeaderProfile: require('./icons/light-header-profile.png'),
  lightHeaderNotification: require('./icons/light-header-notification.png'),
  edit: require('./icons/edit.png'),
  star: require('./icons/star.png'),
  premiumPlan: require('./icons/premium-plan.png'),
  paymentMethods: require('./icons/payment-methods.png'),
  manageFilters: require('./icons/manage-filters.png'),
  notifications: require('./icons/notifications.png'),
  theme: require('./icons/theme.png'),
  language: require('./icons/language.png'),
  privacy: require('./icons/privacy.png'),
  about: require('./icons/about.png'),
  terms: require('./icons/terms.png'),
  faq: require('./icons/faq.png'),
  support: require('./icons/support.png'),
  report: require('./icons/report.png'),
  updates: require('./icons/updates.png'),
  cache: require('./icons/cache.png'),
  delete: require('./icons/delete.png'),
  logout: require('./icons/logout.png'),
  successModal: require('./icons/success-modal.png'),
  faqExpand: require('./icons/faq-expand.png'),
  faqStress: require('./icons/faq-stress.png'),
  logoutModal: require('./icons/logout-modal.png'),
  deleteModal: require('./icons/delete-modal.png'),
  cacheModal: require('./icons/cache-modal.png'),
  darkMode: require('./icons/dark-mode.png'),
lightMode: require('./icons/light-mode.png'),
  editCard: require('./icons/edit-card.png'),
  deleteCard: require('./icons/delete-card.png'),
  deleteCardModal: require('./icons/delete-card-modal.png'),
  editProfile: require('./icons/edit-profile.png'),
  avatar: require('./icons/avatar.png'), // placeholder
resetSuccessModal: require('./icons/reset-sucess-modal.png'),
  priority: require('./icons/priority.png'),
  fees: require('./icons/fees.png'),
  discounts: require('./icons/discounts.png'),
  vouchers: require('./icons/vouchers.png'),


};
export const Fonts = {
  regular: 'Lexend-Regular',
  medium: 'Lexend-Medium',
  semibold: 'Lexend-SemiBold',
  bold: 'Lexend-Bold',
};

// ==== src/components/common/AppHeader.js ====
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';
import { Icons } from '../../assets/assets';
import typography from '../../theme/typography';
import useTheme from '../../hooks/useTheme';

const AppHeader = ({ title, onBack }) => {
  const theme = useTheme();

  return (
    <View style={[styles.container, { borderColor: theme.border }]}>
      <TouchableOpacity onPress={onBack} style={styles.backButton}>
        <Image source={Icons.back} style={[styles.backIcon, { tintColor: theme.text }]} />
      </TouchableOpacity>
      <Text style={[styles.title, { color: theme.text }]}>{title}</Text>
      <View style={{ width: 40 }} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 25,
    paddingHorizontal: 17,
    justifyContent: 'space-between',
  },
  backButton: {
    width: 40,
    alignItems: 'flex-start',
  },
  backIcon: {
    width: 40,
    height: 40,
  },
  title: {
    fontSize: 17,
    fontFamily: typography.fontSemiBold,
  },
});

export default AppHeader;

// ==== src/components/common/ConfirmationModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  Modal,
  TouchableOpacity,
} from 'react-native';
import { Images } from '../../assets/assets';
import typography from '../../theme/typography';
import useTheme from '../../hooks/useTheme';
import { useTranslation } from 'react-i18next';

const ConfirmationModal = ({ visible, onClose }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Modal
      transparent
      animationType="fade"
      visible={visible}
      onRequestClose={onClose}
      statusBarTranslucent={true}
    >
      <View style={styles.overlay}>
        <View style={[styles.container, { backgroundColor: theme.background }]}>
          {/* Icon */}
          <Image
            source={Images.accountCreated}
            style={styles.image}
            resizeMode="contain"
          />

          {/* Title */}
          <Text style={[styles.title, { color: theme.text }]}>
            {t('confirmation.accountCreatedTitle')}
          </Text>

          {/* Description */}
          <Text style={[styles.description, { color: theme.textSecondary }]}>
            {t('confirmation.accountCreatedDesc')}
          </Text>

          {/* Button */}
          <TouchableOpacity
            style={[styles.button, { backgroundColor: theme.primary }]}
            onPress={onClose}
          >
            <Text style={styles.buttonText}>{t('confirmation.continue')}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  image: {
    width: 147,
    height: 120,
    marginBottom: 20,
  },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    marginBottom: 10,
    textAlign: 'center',
  },
  description: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    paddingVertical: 12,
    paddingHorizontal: 30,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
});

export default ConfirmationModal;

// ==== src/components/common/DoorDashOTPInput.js ====
import React, { useRef, useState } from 'react';
import { View, TextInput, StyleSheet, Dimensions } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const { width } = Dimensions.get('window');

const DoorDashOTPInput = ({ code, setCode, length = 4, hideDelay = 2 }) => {
  const inputs = useRef([]);
  const [hiddenIndexes, setHiddenIndexes] = useState([]);

  const handleChange = (text, index) => {
    const digit = text.replace(/[^0-9]/g, '');
    const newCode = code.split('');
    newCode[index] = digit;
    setCode(newCode.join(''));

    if (digit && index < length - 1) {
      inputs.current[index + 1].focus();
    }

    if (digit) {
      setTimeout(() => {
        setHiddenIndexes((prev) => [...prev, index]);
      }, hideDelay * 1000);
    } else {
      setHiddenIndexes((prev) => prev.filter((i) => i !== index));
    }
  };

  const handleKeyPress = (e, index) => {
    if (e.nativeEvent.key === 'Backspace' && !code[index] && index > 0) {
      inputs.current[index - 1].focus();
      const newCode = code.split('');
      newCode[index - 1] = '';
      setCode(newCode.join(''));
      setHiddenIndexes((prev) => prev.filter((i) => i !== index - 1));
    }
  };

  return (
    <View style={styles.container}>
      {Array(length)
        .fill(0)
        .map((_, i) => (
          <TextInput
            key={i}
            ref={(el) => (inputs.current[i] = el)}
            style={styles.input}
            keyboardType="number-pad"
            maxLength={1}
            secureTextEntry={hiddenIndexes.includes(i)}
            value={code[i] || ''}
            onChangeText={(text) => handleChange(text, i)}
            onKeyPress={(e) => handleKeyPress(e, i)}
          />
        ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginVertical: 1,
  },
  input: {
    width: width / 7,  // fit 4 boxes evenly across
    height: width / 7,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    textAlign: 'center',
    fontSize: 20,
    fontFamily: typography.fontMedium,
    color: colors.secondary,
    marginHorizontal: 5,
  },
});

export default DoorDashOTPInput;

// ==== src/components/common/LanguageOption.js ====
import React from 'react'; import { View, Text, Image, TouchableOpacity, StyleSheet, useColorScheme, } from 'react-native'; import typography from '../../theme/typography'; import colors from '../../theme/colors'; import { Icons } from '../../assets/assets'; const LanguageOption = ({ flag, label, selected, onPress }) => { const scheme = useColorScheme(); const isDark = scheme === 'dark'; return (<TouchableOpacity style={[styles.container, { borderColor: isDark ? colors.borderDark : colors.borderLight, backgroundColor: isDark ? colors.backgroundDark : colors.backgroundLight, }, selected && { backgroundColor: colors.primary, borderColor: colors.primary, },]} onPress={onPress} activeOpacity={0.8} > <View style={styles.row}> <Image source={flag} style={styles.flag} resizeMode="contain" /> <Text style={[styles.label, { color: isDark ? colors.textDark : colors.textLight }, selected && styles.selectedLabel,]} > {label} </Text> </View> <Image source={selected ? Icons.uncheck : Icons.check} style={[styles.checkIcon, { tintColor: selected ? '#fff' : isDark ? colors.textDark : colors.secondary },]} resizeMode="contain" /> </TouchableOpacity>); }; const styles = StyleSheet.create({ container: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', borderWidth: 1, borderRadius: 12, paddingVertical: 14, paddingHorizontal: 16, alignSelf: 'stretch', marginHorizontal: 20, marginBottom: 12, }, row: { flexDirection: 'row', alignItems: 'center', }, flag: { width: 24, height: 24, marginRight: 12, }, label: { fontSize: 14, fontFamily: typography.fontRegular, }, selectedLabel: { color: '#fff', }, checkIcon: { width: 24, height: 24, }, }); export default LanguageOption;
// ==== src/components/common/LyftOTPInput.js ====
import React, { useRef, useState } from 'react';
import { View, TextInput, StyleSheet } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const LyftOTPInput = ({ code, setCode, hideDelay = 2 }) => {
  const inputs = useRef([]);
  const [hiddenIndexes, setHiddenIndexes] = useState([]);
  const length = 6; // Lyft OTP is always 6 digits

  const handleChange = (text, index) => {
    const digit = text.replace(/[^0-9]/g, ''); // numeric only
    const newCode = code.split('');
    newCode[index] = digit;
    setCode(newCode.join(''));

    if (digit && index < length - 1) {
      inputs.current[index + 1]?.focus();
    }

    if (digit) {
      setTimeout(() => {
        setHiddenIndexes((prev) => [...prev, index]);
      }, hideDelay * 1000);
    } else {
      setHiddenIndexes((prev) => prev.filter((i) => i !== index));
    }
  };

  const handleKeyPress = (e, index) => {
    if (e.nativeEvent.key === 'Backspace' && !code[index] && index > 0) {
      inputs.current[index - 1]?.focus();
      const newCode = code.split('');
      newCode[index - 1] = '';
      setCode(newCode.join(''));
      setHiddenIndexes((prev) => prev.filter((i) => i !== index - 1));
    }
  };

  return (
    <View style={styles.container}>
      {Array(length)
        .fill(0)
        .map((_, i) => (
          <TextInput
            key={i}
            ref={(el) => (inputs.current[i] = el)}
            style={styles.input}
            keyboardType="number-pad"
            maxLength={1}
            secureTextEntry={hiddenIndexes.includes(i)}
            value={code[i] || ''}
            onChangeText={(text) => handleChange(text, i)}
            onKeyPress={(e) => handleKeyPress(e, i)}
          />
        ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-between', // evenly across full width
    marginVertical: 15,
    width: '100%',                   // match Verify button width
  },
  input: {
    flex: 1,                         // each box gets equal space
    height: 50,
    marginHorizontal: 5,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    textAlign: 'center',
    fontSize: 20,
    fontFamily: typography.fontMedium,
    color: colors.secondary,
  },
});

export default LyftOTPInput;

// ==== src/components/common/MainHeader.js ====
import React from 'react';
import { View, Image, StyleSheet, TouchableOpacity } from 'react-native';
import { Images, Icons } from '../../assets/assets';
import useTheme from '../../hooks/useTheme';

const MainHeader = ({ onProfilePress, onNotificationPress, showNotificationDot = true }) => {
  const theme = useTheme();
  const isDark = theme.background === '#020202';

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Logo */}
      <Image
        source={isDark ? Images.logoDark : Images.logoLight}
        style={styles.logo}
        resizeMode="contain"
      />

      {/* Right actions */}
      <View style={styles.actions}>
        {/* Profile */}
        <TouchableOpacity style={styles.iconWrapper} onPress={onProfilePress}>
          <Image
            source={isDark ? Icons.darkHeaderProfile : Icons.lightHeaderProfile}
            style={styles.icon}
            resizeMode="contain"
          />
        </TouchableOpacity>

        {/* Notification */}
        <TouchableOpacity style={styles.iconWrapper} onPress={onNotificationPress}>
          <Image
            source={isDark ? Icons.darkHeaderNotification : Icons.lightHeaderNotification}
            style={styles.icon}
            resizeMode="contain"
          />
          {showNotificationDot && <View style={styles.dot} />}
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 15,
    paddingVertical: 10,
    top: 15,
  },
  logo: {
    width: 90,
    height: 36,
  },
  actions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconWrapper: {
    width: 34,
    height: 34,
    borderRadius: 18,
    borderWidth: 1,
    borderColor: '#ddd',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 12,
  },
  icon: {
    width: 36,
    height: 36,
  },
  dot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'red',
    position: 'absolute',
    top: 6,
    right: 6,
  },
});

export default MainHeader;

// ==== src/components/common/OTPInput.js ====
import React, { useRef, useState } from 'react';
import { View, TextInput, StyleSheet, Dimensions } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const { width } = Dimensions.get('window');

const OTPInput = ({ code, setCode, length = 6, hideDelay = 2 }) => {
  const inputs = useRef([]);
  const [hiddenIndexes, setHiddenIndexes] = useState([]);

  const handleChange = (text, index) => {
    // ✅ sanitize: only numeric
    const digit = text.replace(/[^0-9]/g, '');

    const newCode = code.split('');
    newCode[index] = digit;
    setCode(newCode.join(''));

    if (digit && index < length - 1) {
      inputs.current[index + 1].focus();
    }

    if (digit) {
      setTimeout(() => {
        setHiddenIndexes((prev) => [...prev, index]);
      }, hideDelay * 1000);
    } else {
      setHiddenIndexes((prev) => prev.filter((i) => i !== index));
    }
  };

  const handleKeyPress = (e, index) => {
    if (e.nativeEvent.key === 'Backspace' && !code[index] && index > 0) {
      inputs.current[index - 1].focus();

      const newCode = code.split('');
      newCode[index - 1] = '';
      setCode(newCode.join(''));
      setHiddenIndexes((prev) => prev.filter((i) => i !== index - 1));
    }
  };

  return (
    <View style={styles.container}>
      {Array(length)
        .fill(0)
        .map((_, i) => (
          <TextInput
            key={i}
            ref={(el) => (inputs.current[i] = el)}
            style={styles.input}
            keyboardType="number-pad"
            maxLength={1}
            secureTextEntry={hiddenIndexes.includes(i)}
            value={code[i] || ''}
            onChangeText={(text) => handleChange(text, i)}
            onKeyPress={(e) => handleKeyPress(e, i)}
          />
        ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  input: {
    width: width / 8,
    height: width / 8,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    textAlign: 'center',
    fontSize: 18,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
  },
});

export default OTPInput;

// ==== src/components/common/OnboardingFooter.js ====
import React from 'react';
import { View, TouchableOpacity, Image, StyleSheet } from 'react-native';
import colors from '../../theme/colors';
import { Icons } from '../../assets/assets';

const OnboardingFooter = ({ total, current, onNext }) => {
  return (
    <View style={styles.container}>
      {/* Progress dots */}
      <View style={styles.dotsRow}>
        {Array.from({ length: total }).map((_, idx) => (
          <View
            key={idx}
            style={[styles.dot, idx === current ? styles.dotActive : styles.dotInactive]}
          />
        ))}
      </View>

      {/* Next button */}
      <TouchableOpacity style={styles.nextButton} onPress={onNext}>
        <Image source={Icons.arrow} style={styles.arrow} resizeMode="contain" />
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginHorizontal: 20,
    marginBottom: 40,
  },
  dotsRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
dot: {
  width: 6,
  height: 16,
  borderRadius: 3,
  marginHorizontal: 4,
},
dotActive: {
  backgroundColor: colors.primary,
  height: 28,   // taller for active
},
dotInactive: {
  backgroundColor: '#ddd',
},
nextButton: {
  width: 48,
  height: 48,
  backgroundColor: colors.primary,
  justifyContent: 'center',
  alignItems: 'center',
  transform: [{ rotate: '45deg' }], // rotate square → diamond
  borderRadius: 12, // keeps edges a bit rounded
},
arrow: {
  width: 28,
  height: 28,
  tintColor: '#fff',
  transform: [{ rotate: '-45deg' }], // rotate back the arrow so it looks normal
},
});

export default OnboardingFooter;

// ==== src/components/common/PasswordUpdatedModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  Modal,
  TouchableOpacity,
} from 'react-native';
import { Images } from '../../assets/assets';
import typography from '../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const PasswordUpdatedModal = ({ visible, onClose }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Modal
      transparent
      animationType="fade"
      visible={visible}
      onRequestClose={onClose}
      statusBarTranslucent={true}
    >
      <View style={styles.overlay}>
        <View style={[styles.container, { backgroundColor: theme.background }]}>
          {/* Icon */}
          <Image
            source={Images.forgotModal}
            style={styles.image}
            resizeMode="contain"
          />

          {/* Title */}
          <Text style={[styles.title, { color: theme.text }]}>
            {t('passwordUpdated.title')}
          </Text>

          {/* Description */}
          <Text style={[styles.description, { color: theme.textSecondary }]}>
            {t('passwordUpdated.description')}
          </Text>

          {/* Button */}
          <TouchableOpacity
            style={[styles.button, { backgroundColor: theme.primary }]}
            onPress={onClose}
          >
            <Text style={styles.buttonText}>{t('passwordUpdated.button')}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  image: {
    width: 147,
    height: 120,
    marginBottom: 20,
  },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    marginBottom: 10,
    textAlign: 'center',
  },
  description: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    paddingVertical: 12,
    paddingHorizontal: 30,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
});

export default PasswordUpdatedModal;

// ==== src/components/common/PlatformCard.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets';
import useTheme from '../../hooks/useTheme';

const PlatformCard = ({ title, image, selected, onPress }) => {
  const theme = useTheme();

  return (
    <TouchableOpacity
      style={[
        styles.card,
        { backgroundColor: theme.card, borderColor: theme.border },
        selected && {
          borderColor: theme.primary,
          shadowColor: theme.primary,
          shadowOpacity: 0.25,
          shadowOffset: { width: 0, height: 2 },
          shadowRadius: 6,
          elevation: 3,
        },
      ]}
      onPress={onPress}
      activeOpacity={0.8}
    >
      <View style={[styles.leftIndicator, { backgroundColor: theme.primary }]} />
      <View style={styles.content}>
        <View style={styles.left}>
          <View
            style={[
              styles.logoContainer,
              { backgroundColor: theme.background },
            ]}
          >
            <Image source={image} style={styles.icon} />
          </View>
          <Text style={[styles.text, { color: theme.text }]}>{title}</Text>
        </View>
        <Image
          source={selected ? Icons.uncheck : Icons.check}
          style={[
            styles.checkIcon,
            { tintColor: selected ? theme.primary : theme.textSecondary },
          ]}
        />
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  card: {
    flexDirection: 'row',
    borderRadius: 12,
    borderWidth: 1,
    marginBottom: 10,
    overflow: 'hidden',
  },
  leftIndicator: {
    width: 6,
    borderTopLeftRadius: 12,
    borderBottomLeftRadius: 12,
  },
  content: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
  },
  left: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  logoContainer: {
    width: 56,
    height: 56,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  icon: {
    width: 36,
    height: 36,
    borderRadius: 6,
  },
  text: {
    fontSize: 16,
    fontFamily: typography.fontMedium,
  },
  checkIcon: {
    width: 22,
    height: 22,
  },
});

export default PlatformCard;

// ==== src/components/common/PrimaryButton.js ====
import React from 'react';
import { TouchableOpacity, Text, StyleSheet } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const PrimaryButton = ({ title, onPress, disabled }) => (
  <TouchableOpacity
    style={[styles.button, disabled && styles.disabled]}
    onPress={onPress}
    disabled={disabled}
  >
    <Text style={styles.text}>{title}</Text>
  </TouchableOpacity>
);
const styles = StyleSheet.create({
  button: {
    backgroundColor: colors.primary,
    borderRadius: 10,
    height: 50,
    width: '100%',

    // 👇 Same as LanguageOption box
    alignSelf: 'center',
    marginHorizontal: 20,

    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 10,
  },
  disabled: {
    backgroundColor: colors.secondary,
  },
  text: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
});


export default PrimaryButton;

// ==== src/components/common/ResendButton.js ====
import React from 'react';
import { TouchableOpacity, Text, StyleSheet } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const ResendButton = ({ title, onPress }) => {
  return (
    <TouchableOpacity style={styles.container} onPress={onPress}>
      <Text style={styles.text}>{title}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderWidth: 1,
    borderColor: colors.primary,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 10,
  },
  text: {
    fontSize: 13,
    fontFamily: typography.fontMedium,
    color: colors.primary,
  },
});

export default ResendButton;

// ==== src/components/common/UberOTPInput.js ====
import React, { useRef, useState } from 'react';
import { View, TextInput, StyleSheet, Dimensions } from 'react-native';
import colors from '../../theme/colors';
import typography from '../../theme/typography';

const { width } = Dimensions.get('window');

const UberOTPInput = ({ code, setCode, length = 4, hideDelay = 2 }) => {
  const inputs = useRef([]);
  const [hiddenIndexes, setHiddenIndexes] = useState([]);

  const handleChange = (text, index) => {
    const digit = text.replace(/[^0-9]/g, ''); // numeric only
    const newCode = code.split('');
    newCode[index] = digit;
    setCode(newCode.join(''));

    if (digit && index < length - 1) {
      inputs.current[index + 1].focus();
    }

    if (digit) {
      setTimeout(() => {
        setHiddenIndexes((prev) => [...prev, index]);
      }, hideDelay * 1000);
    } else {
      setHiddenIndexes((prev) => prev.filter((i) => i !== index));
    }
  };

  const handleKeyPress = (e, index) => {
    if (e.nativeEvent.key === 'Backspace' && !code[index] && index > 0) {
      inputs.current[index - 1].focus();
      const newCode = code.split('');
      newCode[index - 1] = '';
      setCode(newCode.join(''));
      setHiddenIndexes((prev) => prev.filter((i) => i !== index - 1));
    }
  };

  return (
    <View style={styles.container}>
      {Array(length)
        .fill(0)
        .map((_, i) => (
          <TextInput
            key={i}
            ref={(el) => (inputs.current[i] = el)}
            style={styles.input}
            keyboardType="number-pad"
            maxLength={1}
            secureTextEntry={hiddenIndexes.includes(i)}
            value={code[i] || ''}
            onChangeText={(text) => handleChange(text, i)}
            onKeyPress={(e) => handleKeyPress(e, i)}
          />
        ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'center',   // center group
    marginVertical: 15,
  },
  input: {
    width: 50,                  // fixed box size
    height: 50,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    textAlign: 'center',
    fontSize: 20,
    fontFamily: typography.fontMedium,
    color: colors.secondary,
    marginHorizontal: 10,        // space between boxes
  },
});

export default UberOTPInput;

// ==== src/components/common/VerifyAlternativeModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Image,
} from 'react-native';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets'; 
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const VerifyAlternativeModal = ({ visible, onClose, destination, navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const isEmail = destination.includes('@');

  const options = isEmail
    ? [
        { key: 'email', label: t('verifyUber.alt.email'), icon: Icons.bottomMail, color: '#007BFF' },
        { key: 'password', label: t('verifyUber.alt.password'), icon: Icons.bottomPassword, color: '#0097A7' },
        { key: 'phone', label: t('verifyUber.alt.changePhone'), icon: Icons.bottomPhone, color: '#B8860B' },
      ]
    : [
        { key: 'password', label: t('verifyUber.alt.password'), icon: Icons.bottomPassword, color: '#0097A7' },
        { key: 'phone', label: t('verifyUber.alt.changePhone'), icon: Icons.bottomPhone, color: '#B8860B' },
      ];

  const handleSelect = (key) => {
    if (key === 'email' || key === 'phone') {
      navigation.navigate('LinkUber');
    } else if (key === 'password') {
      console.log('Handle password verification flow here');
    }
    onClose();
  };

  return (
    <Modal transparent animationType="slide" visible={visible} onRequestClose={onClose} statusBarTranslucent>
      <TouchableOpacity style={styles.overlay} activeOpacity={1} onPress={onClose}>
        <TouchableOpacity style={[styles.container, { backgroundColor: theme.background }]} activeOpacity={1}>
          <Text style={[styles.title, { color: theme.text }]}>{t('verifyUber.alt.title')}</Text>

          {options.map((opt) => (
            <TouchableOpacity
              key={opt.key}
              style={[styles.option, { backgroundColor: opt.color }]}
              onPress={() => handleSelect(opt.key)}
            >
              <Image source={opt.icon} style={styles.icon} resizeMode="contain" />
              <Text style={styles.optionText}>{opt.label}</Text>
            </TouchableOpacity>
          ))}
        </TouchableOpacity>
      </TouchableOpacity>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: { flex: 1, justifyContent: 'flex-end', backgroundColor: 'rgba(0,0,0,0.5)' },
  container: { borderTopLeftRadius: 20, borderTopRightRadius: 20, padding: 20 },
  title: { fontSize: 16, fontFamily: typography.fontBold, marginBottom: 15 },
  option: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 14,
    borderRadius: 12,
    marginBottom: 12,
    paddingHorizontal: 15,
  },
  icon: { width: 20, height: 20, tintColor: '#fff', marginRight: 10 },
  optionText: { fontSize: 14, fontFamily: typography.fontMedium, color: '#fff' },
});

export default VerifyAlternativeModal;

// ==== src/components/more/ActionModal.js ====
import React from 'react';
import { View, Text, StyleSheet, Modal, TouchableOpacity, Image, StatusBar, TouchableWithoutFeedback } from 'react-native';
import typography from '../../theme/typography';
import colors from '../../theme/colors';
import { useTranslation } from 'react-i18next';

const ActionModal = ({ visible, onClose, onConfirm, icon, type }) => {
  const { t } = useTranslation();

  if (!visible) return null;

  const getButtonColor = () => {
    if (type === 'logout') {
      return colors.primary; // blue
    } else if (type === 'delete' || type === 'cache') {
      return '#A50000'; // red
    }
    return colors.primary;
  };


  

  return (
    <Modal transparent animationType="fade" visible={visible} onRequestClose={onClose}>
      <StatusBar barStyle="light-content" backgroundColor="rgba(0, 0, 0, 0.4)" />
      <TouchableWithoutFeedback onPress={onClose}>
        <View style={styles.overlay}>
          <TouchableWithoutFeedback>
            <View style={styles.container}>
              {/* Icon */}
              <Image source={icon} style={styles.icon} resizeMode="contain" />

              {/* Title */}
              <Text style={styles.title}>{t(`more.modals.${type}.title`)}</Text>

              {/* Description */}
              <Text style={styles.desc}>{t(`more.modals.${type}.desc`)}</Text>

              {/* Confirm Button */}
              <TouchableOpacity
                style={[styles.confirmBtn, { backgroundColor: getButtonColor() }]}
                onPress={onConfirm}
              >
                <Text style={styles.confirmText}>{t(`more.modals.${type}.button`)}</Text>
              </TouchableOpacity>

              {/* Cancel */}
              <TouchableOpacity onPress={onClose}>
                <Text style={styles.cancel}>{t('more.modals.cancel')}</Text>
              </TouchableOpacity>
            </View>
          </TouchableWithoutFeedback>
        </View>
      </TouchableWithoutFeedback>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 50, // Add padding to cover notch area
  },
  container: {
    width: '80%',
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  icon: { width: 147, height: 120, marginBottom: 15 },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    color: colors.textLight,
    textAlign: 'center',
    marginBottom: 8,
  },
  desc: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
    textAlign: 'center',
    marginBottom: 20,
  },
  confirmBtn: {
    paddingVertical: 13,
    paddingHorizontal: 30,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  confirmText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
  cancel: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
    marginTop: 15,
  },
});

export default ActionModal;

// ==== src/components/more/AddCardSuccessModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Image,
} from 'react-native';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const AddCardSuccessModal = ({ visible, onClose }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <Modal transparent animationType="fade" visible={visible} onRequestClose={onClose}>
      <View style={styles.overlay}>
        <TouchableOpacity style={StyleSheet.absoluteFill} activeOpacity={1} onPress={onClose} />
        <View style={[styles.container, { backgroundColor: theme.card }]}>
          <Image source={Icons.successModal} style={styles.icon} resizeMode="contain" />
          <Text style={[styles.title, { color: theme.text }]}>
            {t('more.modals.addCard.success.title')}
          </Text>
          <Text style={[styles.desc, { color: theme.textSecondary }]}>
            {t('more.modals.addCard.success.desc')}
          </Text>
          <TouchableOpacity
            style={[styles.button, { backgroundColor: theme.primary }]}
            onPress={onClose}
          >
            <Text style={styles.buttonText}>
              {t('more.modals.addCard.success.button')}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  icon: { width: 150, height: 120, marginBottom: 15 },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    marginBottom: 8,
    textAlign: 'center',
  },
  desc: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    paddingVertical: 12,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff', // ✅ always white for contrast
  },
});

export default AddCardSuccessModal;

// ==== src/components/more/CardItem.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
} from 'react-native';
import typography from '../../theme/typography';
import { Icons, Images } from '../../assets/assets';
import useTheme from '../../hooks/useTheme';

const CardItem = ({ name, maskedNumber, onEdit, onDelete }) => {
  const theme = useTheme();

  return (
    <View style={[styles.card, { backgroundColor: theme.card_theme }]}>
      {/* Decorative tilted stripes - render first so they're behind */}
      <Image
        source={Images.cardBackground}
        style={styles.stripeOne}
        resizeMode="cover"
      />
      <Image
        source={Images.cardBackground}
        style={styles.stripeTwo}
        resizeMode="cover"
      />

      {/* Left - Card info */}
      <View>
        <Text style={[styles.name, { color: theme.text }]}>{name}</Text>
        <Text style={[styles.number, { color: theme.textSecondary }]}>
          {maskedNumber}
        </Text>
      </View>

      {/* Right - Actions */}
      <View style={styles.actions}>
        <TouchableOpacity
          style={[styles.iconWrapper, { backgroundColor: theme.card }]}
          onPress={onEdit}
        >
          <Image
            source={Icons.editCard}
            style={styles.icon}
            resizeMode="contain"
          />
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.iconWrapper, { backgroundColor: theme.card }]}
          onPress={() => {
            console.log('🗑️ Delete button pressed for:', name, maskedNumber);
            onDelete();
          }}
        >
          <Image
            source={Icons.deleteCard}
            style={styles.icon}
            resizeMode="contain"
          />
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  card: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderRadius: 16,
    padding: 16,
    marginHorizontal: 16,
    marginBottom: 12,
    overflow: 'hidden',
    position: 'relative',
  },
  name: {
    fontSize: 16,
    fontFamily: typography.fontSemiBold,
  },
  number: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
    marginTop: 2,
  },
  actions: {
    flexDirection: 'row',
    zIndex: 2, // ✅ ensure actions are above background
  },
  iconWrapper: {
    width: 34,
    height: 34,
    borderRadius: 17,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 10,
  },
  icon: {
    width: 30,
    height: 30,
  },
  // Diagonal Stripes - background layer
  stripeOne: {
    position: 'absolute',
    pointerEvents: 'none',
    zIndex: 0,
    right: '40%',
    top: -40,
    bottom: -20,
    width: '12%',
    opacity: 1.0,
    transform: [{ rotate: '20deg' }],
  },
  stripeTwo: {
    position: 'absolute',
    pointerEvents: 'none',
    zIndex: 0,
    right: '20%',
    top: -20,
    bottom: -20,
    width: '12%',
    opacity: 1.0,
    transform: [{ rotate: '20deg' }],
  },
});

export default CardItem;

// ==== src/components/more/DeleteCardModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Image,
  TouchableWithoutFeedback,
} from 'react-native';
import typography from '../../theme/typography';
import colors from '../../theme/colors'; // keeping for static tokens like danger
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const DeleteCardModal = ({ visible, onClose, onConfirm }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const styles = React.useMemo(() => makeStyles(theme), [theme]);

  return (
    <Modal transparent animationType="fade" visible={visible} onRequestClose={onClose}>
      <View style={styles.overlay}>
        {/* Background clickable */}
        <TouchableWithoutFeedback onPress={onClose}>
          <View style={StyleSheet.absoluteFill} />
        </TouchableWithoutFeedback>

        {/* Modal box */}
        <View style={styles.container}>
          {/* Icon */}
          <Image source={Icons.deleteCardModal} style={styles.icon} resizeMode="contain" />

          {/* Title */}
          <Text style={styles.title}>{t('cards.deleteModal.title')}</Text>

          {/* Description */}
          <Text style={styles.desc}>{t('cards.deleteModal.desc')}</Text>

          {/* Confirm Button */}
          <TouchableOpacity
            style={styles.confirmBtn}
            onPress={onConfirm}
          >
            <Text style={styles.confirmText}>{t('cards.deleteModal.button')}</Text>
          </TouchableOpacity>

          {/* Cancel */}
          <TouchableOpacity onPress={onClose}>
            <Text style={styles.cancel}>{t('more.modals.cancel')}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const makeStyles = (theme) =>
  StyleSheet.create({
    overlay: {
      flex: 1,
      backgroundColor: 'rgba(0,0,0,0.4)',
      justifyContent: 'center',
      alignItems: 'center',
      paddingTop: 50,
    },
    container: {
      width: '80%',
      backgroundColor: theme.card_theme, // themed surface
      borderRadius: 16,
      padding: 20,
      alignItems: 'center',
    },
    icon: { width: 147, height: 120, marginBottom: 15 },
    title: {
      fontSize: 20,
      fontFamily: typography.fontSemiBold,
      color: theme.text, // was colors.textLight
      textAlign: 'center',
      marginBottom: 8,
    },
    desc: {
      fontSize: 15,
      fontFamily: typography.fontRegular,
      color: theme.textSecondary, // was colors.secondary
      textAlign: 'center',
      marginBottom: 20,
    },
    confirmBtn: {
      paddingVertical: 13,
      borderRadius: 10,
      width: '100%',
      alignItems: 'center',
      backgroundColor: colors.danger, // keep brand/state token
    },
    confirmText: {
      fontSize: 15,
      fontFamily: typography.fontMedium,
      color: '#fff',
    },
    cancel: {
      fontSize: 14,
      fontFamily: typography.fontRegular,
      color: theme.textSecondary, // was colors.secondary
      marginTop: 15,
    },
  });

export default DeleteCardModal;

// ==== src/components/more/EditCardSuccessModal.js ====
import React from 'react';
import { View, Text, StyleSheet, Modal, TouchableOpacity, Image } from 'react-native';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const EditCardSuccessModal = ({ visible, onClose }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  if (!visible) return null;

  return (
    <Modal transparent animationType="fade" visible={visible} onRequestClose={onClose}>
      <View style={styles.overlay}>
        <TouchableOpacity style={StyleSheet.absoluteFill} activeOpacity={1} onPress={onClose} />
        <View style={[styles.container, { backgroundColor: theme.card }]}>
          <Image source={Icons.successModal} style={styles.icon} resizeMode="contain" />
          <Text style={[styles.title, { color: theme.text }]}>
            {t('more.modals.editCard.success.title')}
          </Text>
          <Text style={[styles.desc, { color: theme.textSecondary }]}>
            {t('more.modals.editCard.success.desc')}
          </Text>
          <TouchableOpacity
            style={[styles.button, { backgroundColor: theme.primary }]}
            onPress={onClose}
          >
            <Text style={styles.buttonText}>
              {t('more.modals.editCard.success.button')}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  icon: { width: 150, height: 120, marginBottom: 15 },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    marginBottom: 8,
    textAlign: 'center',
  },
  desc: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    paddingVertical: 12,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff', // ✅ always white for contrast
  },
});

export default EditCardSuccessModal;

// ==== src/components/more/MoreOptionCard.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity, Dimensions } from 'react-native';
import typography from '../../theme/typography';
import useTheme from '../../hooks/useTheme';

const { width } = Dimensions.get('window');
const CARD_WIDTH = (width - 48) / 2; // 2 cards per row

const MoreOptionCard = ({ icon, title, description, onPress }) => {
  const theme = useTheme();

  return (
    <TouchableOpacity
      style={[styles.card, { backgroundColor: theme.background, shadowColor: theme.text }]}
      onPress={onPress}
    >
      {/* Icon inside primary-colored box */}
      <View style={[styles.iconContainer, { backgroundColor: theme.primary }]}>
        <Image source={icon} style={styles.icon} resizeMode="contain" />
      </View>

      {/* Title */}
      <Text style={[styles.title, { color: theme.text }]}>{title}</Text>

      {/* Description */}
      {description ? (
        <Text style={[styles.description, { color: theme.textSecondary }]}>{description}</Text>
      ) : null}
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  card: {
    width: CARD_WIDTH,
    borderRadius: 12,
    padding: 16,
    margin: 8,
    elevation: 2,
    shadowOpacity: 0.05,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 10,
  },
  icon: {
    width: 28,
    height: 28,
    tintColor: '#fff', // ✅ always white for contrast
  },
  title: {
    fontSize: 14,
    fontFamily: typography.fontSemiBold,
    marginBottom: 6,
  },
  description: {
    fontSize: 12,
    fontFamily: typography.fontRegular,
  },
});

export default MoreOptionCard;

// ==== src/components/more/ProfileHeader.js ====
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';
import { Icons } from '../../assets/assets';
import typography from '../../theme/typography';
import useTheme from '../../hooks/useTheme';

const ProfileHeader = ({ title, onBack, onEdit }) => {
  const theme = useTheme();

  return (
    <View style={[styles.container, { borderColor: theme.border }]}>
      {/* Back */}
      <TouchableOpacity onPress={onBack} style={styles.iconWrapper}>
        <Image source={Icons.back} style={[styles.icon, { tintColor: theme.text }]} />
      </TouchableOpacity>

      {/* Title */}
      <Text style={[styles.title, { color: theme.text }]}>{title}</Text>

      {/* Edit Profile */}
      <TouchableOpacity onPress={onEdit} style={styles.iconWrapper}>
        <Image source={Icons.editProfile} style={[styles.icon, { tintColor: theme.text }]} />
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 25,
    paddingHorizontal: 16,
    justifyContent: 'space-between',
  },
  iconWrapper: { width: 40, height: 40, justifyContent: 'center', alignItems: 'center' },
  icon: { width: 40, height: 40 },
  title: {
    fontSize: 17,
    fontFamily: typography.fontSemiBold,
  },
});

export default ProfileHeader;
 
// ==== src/components/more/ProfileOverviewCard.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { Icons, Images } from '../../assets/assets';
import typography from '../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../hooks/useTheme';

const ProfileOverviewCard = ({
  name = 'John Anderson',
  memberStatus = 'profileCard.member',
  rating = 4.9,
  trips = 127,
  earnings = '$2,847',
  thisMonth = 18,
  onEdit,
}) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.cardContainer, { backgroundColor: theme.bottom_background }]}>
      {/* Blue left line */}
      <View style={[styles.leftBlueLine, { backgroundColor: theme.primary }]} />

      <View style={[styles.card, { backgroundColor: theme.bottom_background }]}>
        {/* Edit button (unchanged) */}
        <TouchableOpacity style={styles.editBtn} onPress={onEdit}>
          <Image source={Icons.edit} style={styles.editIcon} />
          <Text style={styles.editText}>{t('profileCard.edit')}</Text>
        </TouchableOpacity>

        {/* Left Section */}
        <View style={styles.left}>
          <Image source={Images.userProfile} style={styles.avatar} />
          <Text style={[styles.name, { color: theme.text }]}>{name}</Text>
          <Text style={[styles.member, { color: theme.textSecondary }]}>{t(memberStatus)}</Text>
          <View style={styles.rating}>
            <Image source={Icons.star} style={styles.starIcon} />
            <Text style={[styles.ratingText, { color: theme.text }]}>{rating}</Text>
          </View>
        </View>

        {/* Divider */}
        <View style={[styles.divider, { borderColor: theme.border }]} />

        {/* Right Section */}
        <View style={styles.right}>
          <View style={styles.statBlock}>
            <Text style={[styles.value, { color: theme.text }]}>{trips}</Text>
            <Text style={[styles.label, { color: theme.textSecondary }]}>{t('profileCard.trips')}</Text>
          </View>

          <View style={styles.statBlock}>
            <Text style={[styles.value, { color: theme.text }]}>{earnings}</Text>
            <Text style={[styles.label, { color: theme.textSecondary }]}>{t('profileCard.earnings')}</Text>
          </View>

          <View style={styles.statBlock}>
            <Text style={[styles.value, { color: theme.text }]}>{thisMonth}</Text>
            <Text style={[styles.label, { color: theme.textSecondary }]}>{t('profileCard.thisMonth')}</Text>
          </View>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  cardContainer: {
    flexDirection: 'row',
    margin: 16,
    borderRadius: 16,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.05,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    overflow: 'hidden',
  },
  leftBlueLine: {
    width: 4,
    borderTopLeftRadius: 16,
    borderBottomLeftRadius: 16,
  },
  card: {
    flex: 1,
    flexDirection: 'row',
    padding: 20,
    position: 'relative',
  },
  editBtn: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007BFF', // stays the same
    borderTopRightRadius: 12,
    borderBottomLeftRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 4,
  },
  editIcon: {
    width: 16,
    height: 16,
    tintColor: '#fff', // stays the same
    marginRight: 4,
  },
  editText: {
    fontSize: 12,
    fontFamily: typography.fontMedium,
    color: '#fff', // stays the same
  },
  left: { flex: 1 },
  avatar: { width: 70, height: 70, borderRadius: 35, marginBottom: 10 },
  name: { fontSize: 17, fontFamily: typography.fontSemiBold },
  member: { fontSize: 12, fontFamily: typography.fontRegular },
  rating: { flexDirection: 'row', alignItems: 'center', marginTop: 6 },
  starIcon: { width: 16, height: 16, tintColor: '#f4a261', marginRight: 4 },
  ratingText: { fontSize: 13, fontFamily: typography.fontMedium },
  divider: {
    width: 1,
    borderLeftWidth: 1,
    borderStyle: 'dashed',
    marginHorizontal: 15,
  },
  right: {
    flex: 1,
    justifyContent: 'space-evenly',
    alignItems: 'center',
  },
  statBlock: { alignItems: 'center', marginBottom: 8 },
  value: { fontSize: 20, fontFamily: typography.fontMedium },
  label: { fontSize: 12, fontFamily: typography.fontRegular },
});

export default ProfileOverviewCard;

// ==== src/components/more/ResetSuccessModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Image,
} from 'react-native';
import typography from '../../theme/typography';
import colors from '../../theme/colors';
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';

const ResetSuccessModal = ({ visible, onClose }) => {
  const { t } = useTranslation();

  if (!visible) return null;

  return (
    <Modal transparent animationType="fade" visible={visible} onRequestClose={onClose}>
      <View style={styles.overlay}>
        <View style={styles.container}>
          {/* Icon */}
          <Image source={Icons.resetSuccessModal} style={styles.icon} resizeMode="contain" />

          {/* Title */}
          <Text style={styles.title}>{t('resetPassword.success.title')}</Text>

          {/* Description */}
          <Text style={styles.desc}>{t('resetPassword.success.desc')}</Text>

          {/* Confirm Button */}
          <TouchableOpacity style={styles.button} onPress={onClose}>
            <Text style={styles.buttonText}>{t('resetPassword.success.button')}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  icon: { width: 147, height: 120, marginBottom: 15 },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    color: colors.textLight,
    marginBottom: 8,
    textAlign: 'center',
  },
  desc: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    backgroundColor: colors.primary,
    paddingVertical: 12,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
});

export default ResetSuccessModal;

// ==== src/components/more/SuccessModal.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Image,
  StatusBar,
} from 'react-native';
import typography from '../../theme/typography';
import colors from '../../theme/colors';
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';

const SuccessModal = ({ visible, onClose }) => {
  const { t } = useTranslation();

  if (!visible) return null;

  return (
    <Modal
      transparent
      animationType="fade"
      visible={visible}
      onRequestClose={onClose}
      statusBarTranslucent={true} // 👈 ensures overlay covers status bar
    >
      <TouchableOpacity
        style={styles.overlay}
        activeOpacity={1}
        onPress={onClose} // 👈 tapping overlay closes modal
      >
        <TouchableOpacity
          style={styles.container}
          activeOpacity={1} // prevent closing when clicking inside modal
        >
          {/* Icon */}
          <Image source={Icons.successModal} style={styles.icon} resizeMode="contain" />

          {/* Title */}
          <Text style={styles.title}>{t('more.modals.reportIssue.success.title')}</Text>

          {/* Description */}
          <Text style={styles.desc}>{t('more.modals.reportIssue.success.desc')}</Text>

          {/* Confirm Button */}
          <TouchableOpacity style={styles.button} onPress={onClose}>
            <Text style={styles.buttonText}>
              {t('more.modals.reportIssue.success.button')}
            </Text>
          </TouchableOpacity>
        </TouchableOpacity>
      </TouchableOpacity>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '80%',
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
  },
  icon: { width: 147, height: 120, marginBottom: 15 },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    color: colors.textLight,
    marginBottom: 8,
    textAlign: 'center',
  },
  desc: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
    textAlign: 'center',
    marginBottom: 20,
  },
  button: {
    backgroundColor: colors.primary,
    paddingVertical: 12,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 15,
    fontFamily: typography.fontMedium,
    color: '#fff',
  },
});

export default SuccessModal;

// ==== src/components/more/ThemeOption.js ====
import React from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet } from 'react-native';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets';
import useTheme from '../../hooks/useTheme';

const ThemeOption = ({ icon, label, selected, onPress }) => {
  const theme = useTheme();

  return (
    <TouchableOpacity
      style={[
        styles.container,
        {
          borderColor: theme.border,
          backgroundColor: theme.card,
        },
        selected && {
          backgroundColor: theme.primary,
          borderColor: theme.primary,
        },
      ]}
      onPress={onPress}
      activeOpacity={0.8}
    >
      <View style={styles.row}>
        <Image source={icon} style={styles.icon} resizeMode="contain" />
        <Text
          style={[
            styles.label,
            { color: theme.text },
            selected && styles.selectedLabel,
          ]}
        >
          {label}
        </Text>
      </View>
      <Image
        source={selected ? Icons.uncheck : Icons.check}
        style={[
          styles.checkIcon,
          { tintColor: selected ? '#fff' : theme.textSecondary },
        ]}
        resizeMode="contain"
      />
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 14,
    paddingHorizontal: 16,
    alignSelf: 'stretch',
    marginHorizontal: 20,
    marginBottom: 12,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  icon: {
    width: 24,
    height: 24,
    marginRight: 12,
  },
  label: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
  },
  selectedLabel: {
    color: '#fff',
  },
  checkIcon: {
    width: 24,
    height: 24,
  },
});

export default ThemeOption;

// ==== src/components/plans/AutoRenewRow.js ====
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import useTheme from '../../hooks/useTheme';
import typography from '../../theme/typography';

const AutoRenewRow = ({ text }) => {
  const theme = useTheme();
  return (
   <View style={[styles.row, { backgroundColor: 'rgba(0, 123, 255, 0.2)',borderRadius:12 }]}>
      <View style={[styles.dot, { backgroundColor: theme.primary }]} />
      <Text style={[styles.text, { color: theme.text }]}>{text}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  row: { flexDirection: 'row', alignItems: 'center', gap: 10, padding: 14, borderRadius: 12, marginTop: 6 },
  dot: { width: 12, height: 12, borderRadius: 6 },
  text: { fontSize: 12, lineHeight: 18, fontFamily: typography.fontRegular }, // regular 12
});

export default AutoRenewRow;

// ==== src/components/plans/MasterPlanHero.js ====
import React from 'react';
import { ImageBackground, View, Text, StyleSheet } from 'react-native';
import useTheme from '../../hooks/useTheme';
import typography from '../../theme/typography';
import { Images } from '../../assets/assets';

const MasterPlanHero = ({ title, description }) => {
  const theme = useTheme();
  return (
    <ImageBackground
      source={Images.masterplanBackground}
      imageStyle={styles.bgImg}
      style={[styles.wrap, { backgroundColor: theme.primaryDeep ?? '#0B2A57' }]}
      resizeMode="cover"
    >
      <Text style={[styles.title, { color: '#fff' }]}>{title}</Text>
      <Text style={[styles.desc, { color: 'rgba(255,255,255,0.85)' }]}>{description}</Text>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  wrap: {
    borderRadius: 16,
    padding: 16,
    marginBottom: 20,
    overflow: 'hidden',
  },
  bgImg: {
    borderRadius: 16,
    opacity: 0.35, // subtle texture like design
  },
  title: {
    fontSize: 24, // semibold 24
    lineHeight: 30,
    fontFamily: typography.fontSemiBold,
    marginBottom: 6,
  },
  desc: {
    fontSize: 12, // regular 12
    lineHeight: 18,
    fontFamily: typography.fontRegular,
  },
});

export default MasterPlanHero;

// ==== src/components/plans/PerkItem.js ====
import React from 'react';
import { View, Text, StyleSheet, Image } from 'react-native';
import useTheme from '../../hooks/useTheme';
import typography from '../../theme/typography';
import { Icons } from '../../assets/assets';

const PerkItem = ({ iconKey, title, subtitle }) => {
  const theme = useTheme();
  const iconSource = Icons[iconKey] || null;

  return (
    <View style={styles.container}>
      <View style={[styles.leftLine, { backgroundColor: theme.primary ?? '#007AFF' }]} />
      <View style={[styles.card, { backgroundColor: theme.card_theme }]}>
        <View style={[styles.iconWrap, { backgroundColor: theme.primaryDim ?? 'rgba(0,122,255,0.15)' }]}>
          {iconSource ? <Image source={iconSource} style={{ width: 24, height: 24 }} /> : null}
        </View>
        <View style={{ flex: 1 }}>
          <Text style={[styles.title, { color: theme.text }]}>{title}</Text>
          <Text style={[styles.subtitle, { color: theme.textSecondary }]}>{subtitle}</Text>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  leftLine: {
    width: 4,
    borderTopLeftRadius: 12,
    borderBottomLeftRadius: 12,
  },
  card: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    padding: 14,
    borderTopRightRadius: 12,
    borderBottomRightRadius: 12,
  },
  iconWrap: {
    width: 42, 
    height: 42, 
    borderRadius: 10,
    alignItems: 'center', 
    justifyContent: 'center',
  },
  title: { 
    fontSize: 14, 
    lineHeight: 20, 
    fontFamily: typography.fontBold 
  },
  subtitle: { 
    fontSize: 12, 
    lineHeight: 18, 
    fontFamily: typography.fontRegular 
  },
});

export default PerkItem;
// ==== src/components/plans/PlanOptionCard.js ====
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import useTheme from '../../hooks/useTheme';
import typography from '../../theme/typography';

const Pill = ({ text, theme }) => (
  <View style={[styles.pill, { backgroundColor: theme.primary }]}>
    <Text style={[styles.pillText, { color: '#fff' }]}>{text}</Text>
  </View>
);

const PlanOptionCard = ({
  title,
  description,
  billedNote,
  priceMain,
  priceUnit,
  badgeText,
  selected,
  onPress,
}) => {
  const theme = useTheme();

  return (
    <TouchableOpacity
      activeOpacity={0.9}
      onPress={onPress}
      style={[
        styles.card,
        {
          backgroundColor: theme.card_theme,
          borderColor: selected ? theme.primary : (theme.cardBorder ?? 'rgba(255,255,255,0.08)'),
          shadowOpacity: selected ? 0.25 : 0,
        }
      ]}
    >
      {/* Pill on the top border */}
      {!!badgeText && (
        <View style={styles.pillContainer}>
          <Pill text={badgeText} theme={theme} />
        </View>
      )}

      {/* Title */}
      <Text style={[styles.title, { color: theme.text }]}>{title}</Text>

      {/* Description and Price Row */}
      <View style={styles.descriptionPriceRow}>
        <Text style={[styles.desc, { color: theme.textSecondary, flex: 1 }]}>
          {description}
        </Text>
        <View style={styles.priceContainer}>
          <Text style={[styles.price, { color: theme.text }]}>{`$${priceMain}`}</Text>
          <Text style={[styles.unit, { color: theme.textSecondary }]}>{priceUnit}</Text>
        </View>
      </View>

      {/* Billing note */}
      {billedNote && (
        <Text style={styles.billed}>
          <Text style={{ color: theme.primary }}>{billedNote.split(' ')[0]}</Text>
          <Text style={{ color: theme.textSecondary }}> {billedNote.split(' ').slice(1).join(' ')}</Text>
        </Text>
      )}
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  card: {
    borderRadius: 14,
    borderWidth: 1,
    padding: 14,
    marginBottom: 12,
    shadowColor: '#000',
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 4 },
    elevation: 4,
  },
  pillContainer: {
    position: 'absolute',
    top: -16,
    right: 20,
    zIndex: 1,
  },
  title: {
    fontSize: 20,
    lineHeight: 26,
    fontFamily: typography.fontSemiBold,
  },
  pill: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 20,
  },
  pillText: { 
    fontSize: 12, 
    fontFamily: typography.fontSemiBold 
  },
  descriptionPriceRow: {
    flexDirection: 'row',
    marginTop: 6,
    alignItems: 'flex-start',
  },
  desc: { 
    fontSize: 11, 
    lineHeight: 17, 
    fontFamily: typography.fontRegular,
    paddingRight: 12,
  },
  priceContainer: {
    alignItems: 'flex-end',
  },
  price: { 
    fontSize: 24, 
    lineHeight: 28, 
    fontFamily: typography.fontSemiBold 
  },
  unit: { 
    fontSize: 12, 
    lineHeight: 16, 
    fontFamily: typography.fontRegular 
  },
  billed: { 
    marginTop: 8, 
    fontSize: 12, 
    lineHeight: 18, 
    fontFamily: typography.fontSemiBold 
  },
});

export default PlanOptionCard;
// ==== src/components/plans/RestorePurchaseButton.js ====
import React from 'react';
import { TouchableOpacity, Text, StyleSheet } from 'react-native';
import useTheme from '../../hooks/useTheme';
import typography from '../../theme/typography';

const RestorePurchaseButton = ({ onPress }) => {
  const theme = useTheme();
  return (
    <TouchableOpacity
      onPress={onPress}
      style={[styles.btn, { borderColor: theme.primary }]}
      activeOpacity={0.7}
    >
      <Text style={[styles.label, { color: theme.primary }]}>Restore Purchase</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  btn: {
    marginTop: 12,
    height: 50,
    borderRadius: 12,
    borderWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  label: { fontSize: 16, fontFamily: typography.fontSemiBold },
});

export default RestorePurchaseButton;

// ==== src/config/appConfig.js ====

// ==== src/context/ThemeContext.js ====
// src/context/ThemeContext.js
import React, { createContext, useContext, useEffect, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import lightTheme from '../theme/lightTheme';
import darkTheme from '../theme/darkTheme';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [themeKey, setThemeKey] = useState('light'); // default
  const [theme, setTheme] = useState(lightTheme);

  useEffect(() => {
    (async () => {
      const saved = await AsyncStorage.getItem('appTheme');
      if (saved) {
        updateTheme(saved);
      }
    })();
  }, []);

  const updateTheme = async (key) => {
    setThemeKey(key);
    setTheme(key === 'dark' ? darkTheme : lightTheme);
    await AsyncStorage.setItem('appTheme', key);
  };

  return (
    <ThemeContext.Provider value={{ theme, themeKey, updateTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useThemeContext = () => useContext(ThemeContext);

// ==== src/hooks/useTheme.js ====
import { useColorScheme } from 'react-native';
import lightTheme from '../theme/lightTheme';
import darkTheme from '../theme/darkTheme';

export default function useTheme() {
  const scheme = useColorScheme(); // returns 'light' | 'dark'
  return scheme === 'dark' ? darkTheme : lightTheme;
}

// ==== src/index.js ====

// ==== src/localization/i18n.js ====
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import AsyncStorage from '@react-native-async-storage/async-storage';

import en from './en.json';
import es from './es.json';
import tr from './tr.json';

const resources = {
  en: { translation: en },
  es: { translation: es },
  tr: { translation: tr },
};

const DEFAULT_LANGUAGE = 'en';

// Initialize synchronously with default
i18n.use(initReactI18next).init({
  compatibilityJSON: 'v3',
  resources,
  lng: DEFAULT_LANGUAGE,
  fallbackLng: DEFAULT_LANGUAGE,
  interpolation: { escapeValue: false },
});

// Later, load saved language
AsyncStorage.getItem('appLanguage').then((lang) => {
  if (lang) {
    i18n.changeLanguage(lang);
  }
});

export default i18n;

// ==== src/localization/index.js ====

// ==== src/navigation/AppNavigator.js ====
import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import SplashScreen from '../screens/Splash';
import LanguageSelectionScreen from '../screens/Auth/LanguageSelection';
import typography from '../theme/typography';
import OnboardingScreen from '../screens/Auth/Onboarding';
import SignInScreen from '../screens/Auth/SignIn';
import SignUpScreen from '../screens/Auth/SignUp';
import VerifyOTPScreen from '../screens/Auth/VerifyOTP';
import ForgotVerifyOTPScreen from '../screens/Auth/ForgotVerifyOTP';
import ResetPasswordScreen from '../screens/Auth/ResetPassword';
import PlatformSelectionScreen from '../screens/Auth/PlatformSelection';
import ForgotPasswordScreen from '../screens/Auth/ForgotPassword';
import LinkUberScreen from '../screens/Auth/LinkUberScreen';
import VerifyUberOTPScreen from '../screens/Uber/VerifyUberOTP';
import LinkUberPasswordScreen from '../screens/Uber/Auth/LinkUberPasswordScreen';
import SetupAccessibilityScreen from '../screens/Auth/Common/SetupAccessibilityScreen';
import LinkLyftScreen from '../screens/LinkLyft/Auth';
import VerifyLyftOTPScreen from '../screens/LinkLyft/VerifyOTP';
import LinkLyftLicenseScreen from '../screens/LinkLyft/License';
import DoorDashAuthScreen from '../screens/DoorDash/Auth';
import VerifyDoorDashOTPScreen from '../screens/DoorDash/VerifyOTP';
import BottomTabNavigator from './BottomTabNavigator';
import MoreScreen from '../screens/More';
import FAQScreen from '../screens/More/Options/FAQ';
import AnnouncementScreen from '../screens/More/Options/Announcement';
import ReportIssueScreen from '../screens/More/Options/ReportIssue';
import ContactSupportScreen from '../screens/More/Options/Support';
import AboutScreen from '../screens/More/Options/About';
import PrivacyScreen from '../screens/More/Options/Privacy';
import TermsScreen from '../screens/More/Options/Terms';
import LanguageMoreScreen from '../screens/More/Options/Language';
import ThemeMoreScreen from '../screens/More/Options/Theme';
import CardsScreen from '../screens/More/Options/Cards';
 import AddCardScreen from '../screens/More/Options/AddCard';
import EditCardScreen from '../screens/More/Options/EditCard';
import ProfileScreen from '../screens/More/Options/Profile';
import EditProfileScreen from '../screens/More/Options/Profile/EditProfile';
import ResetPasswordScreenMore from '../screens/More/Options/Profile/ResetPasswordScreen';
import PlansScreen from '../screens/More/Options/Plans';

const Stack = createNativeStackNavigator();

const AppNavigator = () => (
  <Stack.Navigator
    initialRouteName="Splash"
    screenOptions={{
      headerShown: false,
    }}
  >
    <Stack.Screen name="Splash" component={SplashScreen} />
    <Stack.Screen name="LanguageSelection" component={LanguageSelectionScreen} />
    <Stack.Screen name="Onboarding" component={OnboardingScreen} />
    <Stack.Screen name="SignIn" component={SignInScreen} />
    <Stack.Screen name="SignUp" component={SignUpScreen} />
    <Stack.Screen name="VerifyOTP" component={VerifyOTPScreen} />
    <Stack.Screen name="PlatformSelection" component={PlatformSelectionScreen} />
    <Stack.Screen name="ForgotPassword" component={ForgotPasswordScreen} />
    <Stack.Screen name="ForgotVerifyOTP" component={ForgotVerifyOTPScreen} />
    <Stack.Screen name="ResetPassword" component={ResetPasswordScreen} />
    <Stack.Screen name="LinkUber" component={LinkUberScreen} />
    <Stack.Screen name="VerifyUberOTP" component={VerifyUberOTPScreen} />
    <Stack.Screen name="LinkLyft" component={LinkLyftScreen} />
    <Stack.Screen name="VerifyLyftOTP" component={VerifyLyftOTPScreen} />
    <Stack.Screen name="LinkLyftLicense" component={LinkLyftLicenseScreen} />


    <Stack.Screen
      name="LinkUberPassword"
      component={LinkUberPasswordScreen}
      options={{ headerShown: false }}
    />
    <Stack.Screen
      name="SetupAccessibility"
      component={SetupAccessibilityScreen}
      options={{ headerShown: false }}
    />
    <Stack.Screen
      name="DoorDashAuth"
      component={DoorDashAuthScreen}
      options={{ headerShown: false }}
    />
    <Stack.Screen
      name="VerifyDoorDashOTP"
      component={VerifyDoorDashOTPScreen}
      options={{ headerShown: false }}
    />
    <Stack.Screen
      name="Home"
      component={BottomTabNavigator}
      options={{ headerShown: false }}
    />
    <Stack.Screen name="More" component={MoreScreen} />
    <Stack.Screen name="Announcements" component={AnnouncementScreen} />
<Stack.Screen name="ReportIssue" component={ReportIssueScreen} />
<Stack.Screen name="ContactSupport" component={ContactSupportScreen} />
<Stack.Screen name="FAQ" component={FAQScreen} />
<Stack.Screen name="About" component={AboutScreen} />
<Stack.Screen name="Privacy" component={PrivacyScreen} />
<Stack.Screen name="Terms" component={TermsScreen} />
<Stack.Screen name="LanguageMore" component={LanguageMoreScreen} />
<Stack.Screen name="Theme" component={ThemeMoreScreen} />
<Stack.Screen name="Cards" component={CardsScreen} />
<Stack.Screen
  name="AddCard"
  component={AddCardScreen}
  // options={{ headerShown: false }}
/>
<Stack.Screen name="EditCard" component={EditCardScreen} />
<Stack.Screen name="Profile" component={ProfileScreen} options={{ headerShown: false }} />
<Stack.Screen
  name="EditProfile"
  component={EditProfileScreen}
  options={{ headerShown: false }}
/>
<Stack.Screen
  name="ResetPasswordMore"
  component={ResetPasswordScreenMore}
  options={{ headerShown: false }}
/>
<Stack.Screen
  name="Plans"
  component={PlansScreen}
  options={{ headerShown: false }}
/>
  </Stack.Navigator>
);

export default AppNavigator;

// ==== src/navigation/BottomTabNavigator.js ====
import React, { useState } from 'react';
import {
  StyleSheet,
  TouchableOpacity,
  Text,
  View,
  Image,
  Dimensions,
} from 'react-native';
import { CurvedBottomBar } from 'react-native-curved-bottom-bar';
import { Icons, Fonts } from '../assets/assets';
import useTheme from '../hooks/useTheme';

// Screens
import HomeScreen from '../screens/Home';
import AutomationScreen from '../screens/Automation';
import HistoryScreen from '../screens/History';
import EarningScreen from '../screens/Earning';
import typography from '../theme/typography';

const { width, height } = Dimensions.get('window');
const circleSize = width * 0.15;

const BottomTabNavigator = () => {
  const theme = useTheme();
  const [isPlaying, setIsPlaying] = useState(false);

  const _renderIcon = (routeName, selectedTab) => {
    let icon, label;

    switch (routeName) {
      case 'Home':
        icon = selectedTab === 'Home' ? Icons.bottomHomeSelected : Icons.bottomHome;
        label = 'Home';
        break;
      case 'Automation':
        icon =
          selectedTab === 'Automation'
            ? Icons.bottomAutomationSelected
            : Icons.bottomAutomation;
        label = 'Automation';
        break;
      case 'History':
        icon =
          selectedTab === 'History'
            ? Icons.bottomHistorySelected
            : Icons.bottomHistory;
        label = 'History';
        break;
      case 'Earning':
        icon =
          selectedTab === 'Earning'
            ? Icons.bottomEarningSelected
            : Icons.bottomEarning;
        label = 'Earning';
        break;
      default:
        icon = null;
        label = '';
    }

    return (
      <View style={styles.tabIconContainer}>
        {icon && <Image source={icon} style={styles.tabIcon} />}
       <Text
  numberOfLines={1}
  style={[
    styles.tabLabel,
    {
      color: selectedTab === routeName ? theme.primary : theme.textSecondary,
      fontFamily: selectedTab === routeName ? Fonts.bold : Fonts.regular,
    },
  ]}
>
  {label}
</Text>
      </View>
    );
  };

  const renderTabBar = ({ routeName, selectedTab, navigate }) => (
    <TouchableOpacity onPress={() => navigate(routeName)} style={styles.tabbarItem}>
      {_renderIcon(routeName, selectedTab)}
    </TouchableOpacity>
  );

  const handleCenterButtonPress = () => {
    setIsPlaying((prev) => !prev);
    console.log('Center button pressed, playing:', !isPlaying);
  };

  return (
    <CurvedBottomBar.Navigator
      type="DOWN"
      style={styles.bottomBar}
      height={70}
      bgColor={theme.bottom_background}
      circleWidth={50}
      initialRouteName="Home"
      borderTopLeftRight={false}
      screenOptions={{ headerShown: false }}
      renderCircle={() => (
        <View style={[styles.btnCircleUp, { backgroundColor: theme.primary_bottom }]}>
          <TouchableOpacity
            style={styles.centerButton}
            onPress={handleCenterButtonPress}
          >
            <Image
              source={isPlaying ? Icons.bottomPause : Icons.bottomPlay}
              style={[styles.centerPlayIcon]}
            />
          </TouchableOpacity>
        </View>
      )}
      tabBar={renderTabBar}
    >
      <CurvedBottomBar.Screen name="Home" component={HomeScreen} position="LEFT" />
      <CurvedBottomBar.Screen
        name="Automation"
        component={AutomationScreen}
        position="LEFT"
      />
      <CurvedBottomBar.Screen
        name="History"
        component={HistoryScreen}
        position="RIGHT"
      />
      <CurvedBottomBar.Screen
        name="Earning"
        component={EarningScreen}
        position="RIGHT"
      />
    </CurvedBottomBar.Navigator>
  );
};

const styles = StyleSheet.create({
  bottomBar: {
    position: 'absolute',
    left: 0,
    backgroundColor:"transparent",
    right: 0,
    bottom: 0,
    elevation: 0,
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
  },
  btnCircleUp: {
    width: circleSize,
    height: circleSize,
    borderRadius: circleSize / 2,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: -(circleSize / 3),
  },
  centerButton: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    width: '100%',
    height: '100%',
  },
  centerPlayIcon: {
    top: 0,                 
    width: 42,
    height: 42,
  },
  tabbarItem: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingBottom: 10,
  },
  tabIconContainer: {
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 4,
  },
  tabIcon: {
    width: 24,
    height: 24,
    marginBottom: 4,
    resizeMode: 'contain',
  },
 tabLabel: {
  fontFamily:typography.fontRegular,
  fontSize: 12,
  textAlign: 'center',
  marginTop: 2,
  numberOfLines: 1,
},
});

export default BottomTabNavigator;

// ==== src/navigation/NavigationService.js ====

// ==== src/redux/slices/userSlice.js ====

// ==== src/redux/store.js ====

// ==== src/screens/Auth/Common/SetupAccessibilityScreen.js ====
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { Images } from '../../../assets/assets';
import typography from '../../../theme/typography';
import { useTranslation, Trans } from 'react-i18next';
import useTheme from '../../../hooks/useTheme';

const SetupAccessibilityScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const [showNotice, setShowNotice] = useState(false);
  const theme = useTheme();

  useEffect(() => {
    const timer = setTimeout(() => setShowNotice(true), 5000);
    return () => clearTimeout(timer);
  }, []);

  if (!showNotice) {
    return (
      <View style={[styles.container, { backgroundColor: theme.background }]}>
        <Image source={Images.setupPicture} style={styles.image} resizeMode="contain" />
        <Text style={[styles.loadingText, { color: theme.textSecondary }]}>
          <Trans i18nKey="setup.loading" components={{ bold: <Text style={styles.boldBlue}></Text> }} />
        </Text>
      </View>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Icon */}
      <Image source={Images.accessibility} style={styles.icon} resizeMode="contain" />

      {/* Title */}
      <Text style={[styles.title, { color: theme.text }]}>{t('setup.accessibilityTitle')}</Text>

      {/* Description */}
      <Text style={[styles.description, { color: theme.textSecondary }]}>
        <Trans i18nKey="setup.accessibilityDesc" components={{ bold: <Text style={styles.boldBlue} /> }} />
      </Text>

      {/* Bullet Points */}
      <View style={styles.points}>
        <Text style={[styles.point, { color: theme.textSecondary }]}>
          • <Trans i18nKey="setup.points.data" components={{ bold: <Text style={styles.bold} /> }} />
        </Text>
        <Text style={[styles.point, { color: theme.textSecondary }]}>
          • <Trans i18nKey="setup.points.privacy" components={{ bold: <Text style={styles.bold} /> }} />
        </Text>
        <Text style={[styles.point, { color: theme.textSecondary }]}>
          • <Trans i18nKey="setup.points.control" components={{ bold: <Text style={styles.bold} /> }} />
        </Text>
      </View>

      {/* Final Note */}
      <Text style={[styles.note, { color: theme.textSecondary }]}>
        <Trans i18nKey="setup.finalNote" components={{ bold: <Text style={styles.boldBlue} /> }} />
      </Text>

      {/* Footer Buttons */}
      <View style={styles.footer}>
        <TouchableOpacity onPress={() => navigation.replace('Home')}>
          <Text style={[styles.skip, { color: theme.textSecondary }]}>{t('setup.skip')}</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.allowBtn, { backgroundColor: theme.primary }]}>
          <Text style={styles.allowText}>{t('setup.allow')}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, alignItems: 'center', justifyContent: 'center', padding: 20 },
  image: { width: 250, height: 250, marginBottom: 20 },
  loadingText: { fontSize: 14, fontFamily: typography.fontRegular, textAlign: 'center' },
  boldBlue: { fontFamily: typography.fontBold, color: '#007BFF' }, // stays brand blue
  bold: { fontFamily: typography.fontBold },
  icon: { width: 100, height: 100, marginBottom: 20 },
  title: { fontSize: 25, fontFamily: typography.fontBold, marginBottom: 15 },
  description: { fontSize: 14, fontFamily: typography.fontRegular, marginBottom: 15, textAlign: 'left' },
  points: { alignSelf: 'stretch', marginBottom: 15 },
  point: { fontSize: 14, fontFamily: typography.fontRegular, marginBottom: 8 },
  note: { fontSize: 14, fontFamily: typography.fontRegular, marginBottom: 30 },
  footer: { flexDirection: 'row', justifyContent: 'space-between', width: '100%' },
  skip: { fontSize: 14, fontFamily: typography.fontRegular },
  allowBtn: { paddingVertical: 12, paddingHorizontal: 20, borderRadius: 10 },
  allowText: { fontSize: 14, fontFamily: typography.fontMedium, color: '#fff' },
});

export default SetupAccessibilityScreen;

// ==== src/screens/Auth/ForgotPassword/index.js ====
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
} from 'react-native';
import { Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import PrimaryButton from '../../../components/common/PrimaryButton';
import AppHeader from '../../../components/common/AppHeader';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../hooks/useTheme';

const ForgotPasswordScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* App Header */}
      <AppHeader title={t('forgotPassword.title')} onBack={() => navigation.goBack()} />

      <View style={styles.content}>
        <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
          {t('forgotPassword.subtitle')}
        </Text>

        {/* Email Label */}
        <Text style={[styles.label, { color: theme.text }]}>
          {t('forgotPassword.email')}
        </Text>

        {/* Email Input */}
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.mail} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="johndoe@gmail.com"
            placeholderTextColor={theme.textSecondary}
            keyboardType="email-address"
          />
        </View>

        {/* Continue Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('forgotPassword.continue')}
            onPress={() => navigation.navigate('ForgotVerifyOTP')}
          />
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 20 },
  title: { fontSize: 20, fontFamily: typography.fontBold, marginBottom: 10 },
  subtitle: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 20 },
  label: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 8 },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 5,
  },
  icon: { width: 20, height: 20, marginRight: 10 },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  input: { flex: 1, fontSize: 13, fontFamily: typography.fontRegular },
});

export default ForgotPasswordScreen;

// ==== src/screens/Auth/ForgotVerifyOTP/index.js ====
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import typography from '../../../theme/typography';
import PrimaryButton from '../../../components/common/PrimaryButton';
import OTPInput from '../../../components/common/OTPInput';
import ResendButton from '../../../components/common/ResendButton';
import useTheme from '../../../hooks/useTheme';

const ForgotVerifyOTPScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [code, setCode] = useState('');
  const [seconds, setSeconds] = useState(45);

  useEffect(() => {
    if (seconds > 0) {
      const timer = setTimeout(() => setSeconds(seconds - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [seconds]);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title="Verify OTP" onBack={() => navigation.goBack()} />

      <View style={styles.content}>
        {/* Subtitle */}
        <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
          {t('otp.subtitle')} <Text style={{ fontFamily: typography.fontBold, color: theme.primary }}>johndoe@gmail.com</Text>
        </Text>

        {/* Enter Code */}
        <Text style={[styles.label, { color: theme.text }]}>{t('otp.enterCode')}</Text>
        <OTPInput code={code} setCode={setCode} />

        {/* Verify Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('otp.verify')}
            onPress={() => navigation.navigate('ResetPassword')}
          />
        </View>

        {/* Did not receive */}
        <Text style={[styles.didnt, { color: theme.text }]}>
          {t('otp.didntReceive')}
        </Text>
        {seconds > 0 ? (
          <Text style={[styles.timer, { color: theme.textSecondary }]}>
            {t('otp.sendAgain', { seconds })}
          </Text>
        ) : (
          <ResendButton
            title={t('otp.resend')}
            onPress={() => {
              setSeconds(45);
              console.log('Resend OTP triggered');
            }}
          />
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 20 },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 10,
  },
  didnt: {
    fontSize: 15,
    fontFamily: typography.fontBold,
    marginTop: 15,
    alignSelf: 'center',
    width: '100%',
    textAlign: 'center',
  },
  timer: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
    marginTop: 10,
    alignSelf: 'center',
    width: '100%',
    textAlign: 'center',
  },
});

export default ForgotVerifyOTPScreen;

// ==== src/screens/Auth/LanguageSelection/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, ImageBackground, Image } from 'react-native';
import { Images, Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import LanguageOption from '../../../components/common/LanguageOption';
import PrimaryButton from '../../../components/common/PrimaryButton';
import AsyncStorage from '@react-native-async-storage/async-storage';
import i18n from '../../../localization/i18n';
import { useTranslation } from 'react-i18next';
import { useColorScheme } from 'react-native';

const LanguageSelectionScreen = ({ navigation }) => {
  const scheme = useColorScheme();

    const { t } = useTranslation();
    
  const [selected, setSelected] = useState(null);
  const languages = [
    { key: 'en', label: 'English', flag: Icons.flagUK },
    { key: 'es', label: 'Spanish', flag: Icons.flagSpain },
    { key: 'tr', label: 'Turkish', flag: Icons.flagTurkey },
  ];

return (
  <ImageBackground
  source={Images.backgroundEffect}
  style={styles.background(scheme)}
  imageStyle={{ marginTop: 70 ,marginBottom:150}}
>

    <View style={styles.container}>
     <Image
  source={scheme === 'dark' ? Images.logoDark : Images.logoLight}
  style={styles.logo}
  resizeMode="contain"
/>


      <Text style={styles.title}>
        <Text style={styles.titleGray}>App </Text>
        <Text style={styles.titleBlue}>Language</Text>
      </Text>

      {languages.map(lang => (
        <LanguageOption
          key={lang.key}
          flag={lang.flag}
          label={lang.label}
          selected={selected === lang.key}
          onPress={() => setSelected(lang.key)}
        />
      ))}
    </View>

    {/* ✅ Bottom fixed button */}
    <View style={styles.bottomButton}>
      <PrimaryButton
        title="Select"
 onPress={async () => {
  try {
    await AsyncStorage.setItem('appLanguage', selected);
    await i18n.changeLanguage(selected);
  } catch (e) {
    console.log('Error saving language:', e);
  }
  navigation.replace('Onboarding');
}}
        disabled={!selected}
      />
    </View>
  </ImageBackground>
);

};

const styles = StyleSheet.create({
 background: (scheme) => ({
  flex: 1,
  backgroundColor: scheme === 'dark' ? '#000' : '#fff',
}),

  bottomButton: {
  position: 'absolute',
  paddingHorizontal: 20,  
  // width: '90%',
  bottom: 40, // adjust spacing from bottom
  left: 0,
  right: 0,
  alignItems: 'center',
},

  container: {
    flex: 1,
    alignItems: 'center',
    paddingTop: 50,
  },
  logo: {
    width: 168,
    height: 60,
    marginBottom: 30,
  },
  title: {
    flexDirection: 'row',
    marginBottom: 30,
    fontSize: 22,
    fontFamily: typography.fontSemiBold,
  },
  titleGray: {
    color: colors.secondary,
  },
  titleBlue: {
    color: colors.primary,
  },
});

export default LanguageSelectionScreen;
// ==== src/screens/Auth/LinkUberScreen/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import { Images, Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import PrimaryButton from '../../../components/common/PrimaryButton';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader'; // ✅ reuse your header
import useTheme from '../../../hooks/useTheme';


const LinkUberScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const [usePhone, setUsePhone] = useState(false);
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('linkUber.title')} />

      {/* Content Container - properly aligned with header padding */}
      <View style={styles.contentContainer}>
        {/* Uber Image */}
        <Image source={Images.uberOnboarding} style={styles.logo} resizeMode="contain" />

        {/* Subtitle */}
        <Text style={styles.subtitle}>{t('linkUber.subtitle')}</Text>

        {/* Input */}
        <Text style={[styles.inputLabel, { color: theme.text }]}>{t('linkUber.inputLabel')}</Text>

        <View style={styles.inputContainer}>
          <Image source={usePhone ? Icons.phone : Icons.mail} style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder={t('linkUber.placeholder')}
            placeholderTextColor="#999"
            keyboardType={usePhone ? 'phone-pad' : 'email-address'}
          />
        </View>

        {/* Continue Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('linkUber.continue')}
            onPress={() =>
              navigation.navigate('VerifyUberOTP', {
                destination: usePhone ? '(973) 281-6376' : 'you****z@gmail.com',
              })
            }
          />
        </View>

        {/* Divider */}
        <View style={styles.dividerContainer}>
          <View style={styles.divider} />
          <Text style={styles.dividerText}>{t('linkUber.or')}</Text>
          <View style={styles.divider} />
        </View>

        {/* Social Buttons */}
        <View style={styles.socialContainer}>
          <TouchableOpacity style={styles.socialButton}>
            <Image source={Icons.google} style={styles.socialIcon} />
            <Text style={styles.socialText}>{t('linkUber.google')}</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.socialButton}>
            <Image source={Icons.apple} style={styles.socialIcon} />
            <Text style={styles.socialText}>{t('linkUber.apple')}</Text>
          </TouchableOpacity>
        </View>

        {/* Footer Switch */}
        <TouchableOpacity
          style={styles.footer}
          onPress={() => setUsePhone(!usePhone)}
        >
          <Text style={{ fontSize: 13, fontFamily: typography.fontBold, color: theme.textSecondary }}>
            {usePhone ? t('linkUber.switchToEmailPrefix') : t('linkUber.switchToPhonePrefix')}{' '}
            <Text style={{ color: theme.primary }}>
              {usePhone ? t('linkUber.switchToEmailSuffix') : t('linkUber.switchToPhoneSuffix')}
            </Text>
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  contentContainer: {
    flex: 1,
    paddingHorizontal: 20, // Consistent horizontal padding to align with header
  },
  logo: {
    width: 120,
    height: 120,
    alignSelf: 'center',
    marginVertical: 15,
  },
  subtitle: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    color: '#666',
    // textAlign: 'center',
    marginBottom: 10,
  },
  inputLabel: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    color: colors.textLight,
    marginBottom: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 4,
  },
  icon: {
    width: 22,
    height: 22,
    tintColor: '#888',
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
  },
  primaryButtonWrapper: {
    width: '100%', // Fixed from 100% to prevent overflow
    alignSelf: 'center',
  },
  dividerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 15,
  },
  divider: {
    flex: 1,
    height: 1,
    backgroundColor: '#ddd',
  },
  dividerText: {
    marginHorizontal: 10,
    fontSize: 13,
    fontFamily: typography.fontRegular,
    color: '#797979',
  },
  socialContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 20,
  },
  socialButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    width: 103,
    height: 44,
    marginHorizontal: 5,
  },
  socialIcon: {
    width: 20,
    height: 20,
    marginRight: 8,
  },
  socialText: {
    fontSize: 12,
    fontFamily: typography.fontMedium,
    color: colors.secondary,
  },
  footer: {
    marginTop: 'auto',
    marginBottom: 20,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 13,
    fontFamily: typography.fontBold,
    color: colors.primary,
  },
});

export default LinkUberScreen;

// ==== src/screens/Auth/Onboarding/index.js ====
import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  FlatList,
  Dimensions,
  StatusBar,
} from 'react-native';
import { Images } from '../../../assets/assets';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import OnboardingFooter from '../../../components/common/OnboardingFooter';
import { useTranslation } from 'react-i18next';
import i18n from '../../../localization/i18n';
import useTheme from '../../../hooks/useTheme';
import LinearGradient from 'react-native-linear-gradient';

const { width, height } = Dimensions.get('window');

const OnboardingScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [currentIndex, setCurrentIndex] = useState(0);
  const flatListRef = useRef();

  const slides = [
    {
      key: '1',
      image: Images.onboarding1,
      titleBlack: t('onboarding.slide1.titleBlack'),
      titleBlue: t('onboarding.slide1.titleBlue'),
      titleAfter: t('onboarding.slide1.titleAfter'),
      description: t('onboarding.slide1.desc'),
    },
    {
      key: '2',
      image: Images.onboarding2,
      titleBlack: t('onboarding.slide2.titleBlack'),
      titleBlue: t('onboarding.slide2.titleBlue'),
      titleAfter: t('onboarding.slide2.titleAfter'),
      description: t('onboarding.slide2.desc'),
    },
    {
      key: '3',
      image: Images.onboarding3,
      titleBlack: t('onboarding.slide3.titleBlack'),
      titleBlue: t('onboarding.slide3.titleBlue'),
      titleAfter: t('onboarding.slide3.titleAfter'),
      description: t('onboarding.slide3.desc'),
    },
  ];

  const handleNext = () => {
    if (currentIndex < slides.length - 1) {
      flatListRef.current.scrollToIndex({ index: currentIndex + 1 });
    } else {
      navigation.replace('SignIn');
    }
  };

// Gradient colors & locations based on theme
const gradientColors =
  theme.mode === 'dark'
    ? ['rgba(0,0,0,0)', 'rgba(0,0,0,0.7)', '#000000'] 
    : ['rgba(0, 0, 0, 0)', 'rgba(255, 255, 255, 0.4)', '#020202'];

const gradientLocations = theme.mode === 'dark'
  ? [0.55, 0.85, 1]   // start lower in dark mode
  : [0.35, 0.75, 1];  // keep higher in light mode


  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.background,
    },
    slide: {
      width,
      height,
      backgroundColor: theme.background,
    },
    imageContainer: {
      height: height * 0.65,
      width: '100%',
      overflow: 'hidden',
      marginTop: -StatusBar.currentHeight || 0,
    },
    image: {
      width: '100%',
      height: '100%',
    },
contentContainer: {
  flex: 1,
  justifyContent: 'center',
  paddingBottom: theme.mode === 'dark' ? 100 : 160, // less padding in dark
},

    textContainer: {
      paddingHorizontal: 30,
      alignItems: 'center',
    },
    title: {
      fontSize: 28,
      fontFamily: typography.fontBold,
      color: theme.text,
      marginBottom: 16,
      textAlign: 'center',
      lineHeight: 38,
    },
    titleBlue: {
      color: theme.primary,
    },
    description: {
      fontSize: 13,
      fontFamily: typography.fontRegular,
      color: theme.textSecondary,
      lineHeight: 24,
      textAlign: 'center',
      paddingHorizontal: 10,
    },
  });

  return (
    <View style={styles.container}>
      {/* Status bar adapts to theme */}
      <StatusBar
        translucent
        backgroundColor="transparent"
        barStyle={theme.background === '#020202' ? 'light-content' : 'dark-content'}
      />

      <FlatList
        ref={flatListRef}
        data={slides}
        keyExtractor={(item) => item.key}
        horizontal
        pagingEnabled
        showsHorizontalScrollIndicator={false}
        onMomentumScrollEnd={(e) => {
          const index = Math.round(e.nativeEvent.contentOffset.x / width);
          setCurrentIndex(index);
        }}
        renderItem={({ item }) => (
          <View style={styles.slide}>
            <View style={styles.imageContainer}>
              <Image source={item.image} style={styles.image} resizeMode="cover" />
              {/* Gradient overlay */}
              <LinearGradient
                colors={gradientColors}
                locations={gradientLocations}
                style={StyleSheet.absoluteFillObject}
              />
            </View>

            <View style={styles.contentContainer}>
              <View style={styles.textContainer}>
                <Text style={styles.title}>
                  {item.titleBlack}
                  <Text style={styles.titleBlue}>{item.titleBlue}</Text>
                  {item.titleAfter}
                </Text>
                <Text style={styles.description}>{item.description}</Text>
              </View>
            </View>
          </View>
        )}
      />

      <OnboardingFooter
        total={slides.length}
        current={currentIndex}
        onNext={handleNext}
      />
    </View>
  );
};

export default OnboardingScreen;

// ==== src/screens/Auth/PlatformSelection/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, Image } from 'react-native';
import { Images } from '../../../assets/assets';
import typography from '../../../theme/typography';
import PlatformCard from '../../../components/common/PlatformCard';
import PrimaryButton from '../../../components/common/PrimaryButton';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../hooks/useTheme';

const PlatformSelectionScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [selected, setSelected] = useState([]);

  const platforms = [
    { key: 'lyft', title: 'Lyft', image: Images.lyft },
    { key: 'uber', title: 'Uber', image: Images.uber },
    { key: 'doordash', title: 'DoorDash', image: Images.doorDash },
  ];

  const toggleSelection = (key) => {
    if (selected.includes(key)) {
      setSelected(selected.filter((item) => item !== key));
    } else {
      setSelected([...selected, key]);
    }
  };

  const handleContinue = () => {
    console.log('Selected services:', selected);

    if (selected.includes('lyft')) {
      navigation.replace('LinkLyft'); // ✅ Go to Lyft linking
    } else if (selected.includes('uber')) {
      navigation.replace('LinkUber'); // ✅ Go to Uber linking
    } else if (selected.includes('doordash')) {
      // Add screen when you build it
      navigation.replace('DoorDashAuth');
    } else {
      navigation.replace('LinkUber'); // fallback
    }
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Logo */}
      <Image
        source={theme.background === '#020202' ? Images.logoDark : Images.logoLight}
        style={styles.logo}
        resizeMode="contain"
      />

      {/* Heading */}
      <Text style={[styles.heading, { color: theme.text }]}>
        {t('platform.heading')}
      </Text>

      {/* Platform Cards */}
      <View style={{ marginTop: 20 }}>
        {platforms.map((p) => (
          <PlatformCard
            key={p.key}
            title={p.title}
            image={p.image}
            selected={selected.includes(p.key)}
            onPress={() => toggleSelection(p.key)}
            textColor={theme.text}
            borderColor={theme.border}
            backgroundColor={theme.card}
          />
        ))}
      </View>

      {/* Button */}
      <View style={styles.bottom}>
        <PrimaryButton
          title={t('platform.select')}
          disabled={selected.length === 0}
          onPress={handleContinue}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  logo: { width: 160, height: 60, alignSelf: 'center', marginBottom: 20 },
  heading: {
    fontSize: 18,
    fontFamily: typography.fontSemiBold,
    textAlign: 'left',
  },
  bottom: {
    width: '100%',
    alignSelf: 'center',
    marginTop: 'auto',
    marginBottom: 20,
  },
});

export default PlatformSelectionScreen;

// ==== src/screens/Auth/ResetPassword/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Image,
  TouchableOpacity,
} from 'react-native';
import { Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import PrimaryButton from '../../../components/common/PrimaryButton';
import AppHeader from '../../../components/common/AppHeader';
import { useTranslation } from 'react-i18next';
import PasswordUpdatedModal from '../../../components/common/PasswordUpdatedModal';
import useTheme from '../../../hooks/useTheme';

const ResetPasswordScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* App Header */}
      <AppHeader title={t('resetPassword.title')} onBack={() => navigation.goBack()} />

      <View style={styles.content}>
        <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
          {t('resetPassword.subtitle')}
        </Text>

        {/* Password */}
        <Text style={[styles.label, { color: theme.text }]}>
          {t('resetPassword.password')}
        </Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="******"
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showPassword}
          />
          <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
            <Image
              source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Confirm Password */}
        <Text style={[styles.label, { color: theme.text }]}>
          {t('resetPassword.confirmPassword')}
        </Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="******"
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showConfirmPassword}
          />
          <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
            <Image
              source={showConfirmPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Reset Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('resetPassword.resetBtn')}
            onPress={() => setModalVisible(true)}
          />
        </View>
      </View>

      {/* Confirmation Modal */}
      <PasswordUpdatedModal
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          navigation.replace('SignIn');
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 20 },
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 10,
  },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 3,
    paddingHorizontal: 12,
    marginBottom: 8,
  },
  icon: { width: 20, height: 20, marginRight: 10 },
  input: { flex: 1, fontSize: 14, fontFamily: typography.fontMedium },
  eyeIcon: { width: 20, height: 20 },
});

export default ResetPasswordScreen;

// ==== src/screens/Auth/SignIn/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import { Images, Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import PrimaryButton from '../../../components/common/PrimaryButton';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../hooks/useTheme';

const SignInScreen = ({ navigation }) => {
  const [showPassword, setShowPassword] = useState(false);
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Logo */}
      <Image
        source={theme.background === '#020202' ? Images.logoDark : Images.logoLight}
        style={styles.logo}
        resizeMode="contain"
      />

      {/* Heading */}
      <Text style={[styles.title, { color: theme.text }]}>{t('signin.title')}</Text>
      <Text style={[styles.subtitle, { color: theme.subheading }]}>
        {t('signin.subtitle')}
      </Text>

      <Text style={[styles.inputLabel, { color: theme.text }]}>{t('signin.email')}</Text>
      {/* Email */}
      <View style={[styles.inputContainer, { borderColor: theme.border }]}>
        <Image source={Icons.mail} style={[styles.icon, { tintColor: theme.textSecondary }]} />
        <TextInput
          style={[styles.input, { color: theme.text }]}
          placeholder="johndoe@gmail.com"
          placeholderTextColor={theme.textSecondary}
          keyboardType="email-address"
        />
      </View>

      <Text style={[styles.inputLabel, { color: theme.text }]}>{t('signin.password')}</Text>
      {/* Password */}
      <View style={[styles.inputContainer, { borderColor: theme.border }]}>
        <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
        <TextInput
          style={[styles.input, { color: theme.text }]}
          placeholder="******"
          placeholderTextColor={theme.textSecondary}
          secureTextEntry={!showPassword}
        />
        <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
          <Image
            source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
            style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
          />
        </TouchableOpacity>
      </View>

      {/* Forgot Password */}
      <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>
        <Text style={[styles.forgot, { color: theme.primary }]}>{t('signin.forgot')}</Text>
      </TouchableOpacity>

      {/* Sign In Button */}
      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('signin.signinBtn')}
          onPress={() => navigation.replace('Home')}
        />
      </View>

      {/* Divider */}
      <View style={styles.dividerContainer}>
        <View style={[styles.divider, { backgroundColor: theme.border }]} />
        <Text style={[styles.dividerText, { color: theme.textSecondary }]}>
          {t('signin.or')}
        </Text>
        <View style={[styles.divider, { backgroundColor: theme.border }]} />
      </View>

      {/* Social Buttons */}
      <View style={styles.socialContainer}>
        <TouchableOpacity style={[styles.socialButton, { borderColor: theme.border }]}>
          <Image source={Icons.google} style={styles.socialIcon} />
          <Text style={[styles.socialText, { color: theme.text }]}>{t('signin.google')}</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.socialButton, { borderColor: theme.border }]}>
          <Image source={Icons.apple} style={styles.socialIcon} />
          <Text style={[styles.socialText, { color: theme.text }]}>{t('signin.apple')}</Text>
        </TouchableOpacity>
      </View>

      {/* Footer */}
      <View style={styles.footer}>
        <Text style={[styles.footerText, { color: theme.textSecondary }]}>
          {t('signin.noAccount')}{' '}
        </Text>
        <TouchableOpacity onPress={() => navigation.navigate('SignUp')}>
          <Text style={[styles.footerLink, { color: theme.primary }]}>{t('signin.create')}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
  },
  logo: {
    width: 179,
    height: 64,
    alignSelf: 'center',
    marginTop: 40,
    marginBottom: 30,
  },
  title: {
    fontSize: 25,
    fontFamily: typography.fontBold,
  },
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 8,
  },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 3,
    marginBottom: 8,
  },
  icon: {
    width: 24,
    height: 24,
    marginRight: 10,
  },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  eyeIcon: {
    width: 24,
    height: 24,
  },
  forgot: {
    fontSize: 12,
    fontFamily: typography.fontMedium,
    textAlign: 'right',
  },
  dividerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 15,
  },
  divider: {
    flex: 1,
    height: 1,
  },
  dividerText: {
    marginHorizontal: 10,
    fontSize: 13,
    fontFamily: typography.fontMedium,
  },
  socialButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    width: 103,
    height: 44,
    marginHorizontal: 5,
  },
  socialContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 20,
  },
  socialIcon: {
    width: 20,
    height: 20,
    marginRight: 8,
  },
  socialText: {
    fontSize: 12,
    fontFamily: typography.fontMedium,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 'auto',
    marginBottom: 20,
  },
  footerText: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  footerLink: {
    fontSize: 13,
    fontFamily: typography.fontBold,
  },
});

export default SignInScreen;

// ==== src/screens/Auth/SignUp/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import { launchImageLibrary } from 'react-native-image-picker';
import { Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import PrimaryButton from '../../../components/common/PrimaryButton';
import AppHeader from '../../../components/common/AppHeader';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../hooks/useTheme';

const SignUpScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [avatar, setAvatar] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const pickImage = () => {
    launchImageLibrary({ mediaType: 'photo' }, (response) => {
      if (response.assets && response.assets.length > 0) {
        setAvatar(response.assets[0].uri);
      }
    });
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title="Drive Hub" onBack={() => navigation.goBack()} />

      <ScrollView contentContainerStyle={styles.scroll}>
        {/* Title */}
        <Text style={[styles.heading, { color: theme.text }]}>{t('signup.title')}</Text>

        <TouchableOpacity onPress={pickImage} style={styles.avatarContainer}>
          {avatar ? (
            <Image source={{ uri: avatar }} style={styles.avatar} />
          ) : (
            <Image source={Icons.camera} style={styles.cameraIcon} />
          )}
        </TouchableOpacity>

        {/* Full Name */}
        <Text style={[styles.label, { color: theme.text }]}>{t('signup.fullname')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.person} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="John Doe"
            placeholderTextColor={theme.textSecondary}
          />
        </View>

        {/* Phone */}
        <Text style={[styles.label, { color: theme.text }]}>{t('signup.phone')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.phone} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="+92 3344662345"
            placeholderTextColor={theme.textSecondary}
            keyboardType="phone-pad"
          />
        </View>

        {/* Email */}
        <Text style={[styles.label, { color: theme.text }]}>{t('signup.email')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.mail} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="john@gmail.com"
            placeholderTextColor={theme.textSecondary}
            keyboardType="email-address"
          />
        </View>

        {/* Vehicle */}
        <View style={styles.row}>
          <View style={{ flex: 1, marginRight: 5 }}>
            <Text style={[styles.label, { color: theme.text }]}>{t('signup.vehicleName')}</Text>
            <View style={[styles.inputContainer, { borderColor: theme.border }]}>
              <Image source={Icons.vehicle} style={[styles.icon, { tintColor: theme.textSecondary }]} />
              <TextInput
                style={[styles.input, { color: theme.text }]}
                placeholder="Camry"
                placeholderTextColor={theme.textSecondary}
              />
            </View>
          </View>
          <View style={{ flex: 1, marginLeft: 5 }}>
            <Text style={[styles.label, { color: theme.text }]}>{t('signup.vehicleModel')}</Text>
            <View style={[styles.inputContainer, { borderColor: theme.border }]}>
              <Image source={Icons.calendar} style={[styles.icon, { tintColor: theme.textSecondary }]} />
              <TextInput
                style={[styles.input, { color: theme.text }]}
                placeholder="2022"
                placeholderTextColor={theme.textSecondary}
              />
            </View>
          </View>
        </View>

        {/* Password */}
        <Text style={[styles.label, { color: theme.text }]}>{t('signup.password')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder={t('signup.password')}
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showPassword}
          />
          <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
            <Image
              source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Confirm Password */}
        <Text style={[styles.label, { color: theme.text }]}>{t('signup.confirmPassword')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder={t('signup.confirmPassword')}
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showConfirmPassword}
          />
          <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
            <Image
              source={showConfirmPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Terms */}
        <View style={styles.termsRow}>
          <TouchableOpacity style={[styles.checkbox, { borderColor: theme.textSecondary }]} />
          <Text style={[styles.termsText, { color: theme.textSecondary }]}>
            {t('signup.terms1')} <Text style={[styles.link, { color: theme.primary }]}>{t('signup.terms2')}</Text>
          </Text>
        </View>

        {/* Create Account Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton title={t('signup.createBtn')} onPress={() => navigation.navigate('VerifyOTP')} />
        </View>

        {/* Footer */}
        <View style={styles.footer}>
          <Text style={[styles.footerText, { color: theme.textSecondary }]}>{t('signup.already')}</Text>
          <TouchableOpacity onPress={() => navigation.navigate('SignIn')}>
            <Text style={[styles.footerLink, { color: theme.primary }]}>{t('signup.signin')}</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  scroll: { padding: 20, paddingBottom: 40 },
  heading: {
    fontSize: 25,
    fontFamily: typography.fontBold,
    marginBottom: 25,
  },
  avatarContainer: {
    width: 90,
    height: 90,
    borderRadius: 60,
    alignSelf: 'center',
    marginBottom: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatar: { width: '100%', height: '100%', borderRadius: 60 },
  cameraIcon: { width: 121, height: 121 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 5,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
        paddingVertical: 3,
    paddingHorizontal: 12,
    marginBottom: 15,
  },
  icon: { width: 20, height: 20, marginRight: 10 },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  eyeIcon: { width: 20, height: 20 },
  termsRow: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
  checkbox: {
    width: 20,
    height: 20,
    borderWidth: 1,
    marginRight: 10,
    borderRadius: 4,
  },
  termsText: { fontSize: 14, fontFamily: typography.fontRegular },
  link: { fontFamily: typography.fontBold },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 20,
  },
  footerText: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  footerLink: {
    fontSize: 13,
    fontFamily: typography.fontBold,
    marginLeft: 5,
  },
  row: { flexDirection: 'row', justifyContent: 'space-between' },
});

export default SignUpScreen;

// ==== src/screens/Auth/VerifyOTP/index.js ====
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import PrimaryButton from '../../../components/common/PrimaryButton';
import OTPInput from '../../../components/common/OTPInput';
import ResendButton from '../../../components/common/ResendButton';
import ConfirmationModal from '../../../components/common/ConfirmationModal';
import useTheme from '../../../hooks/useTheme';

const VerifyOTPScreen = ({ navigation }) => {
  const [showModal, setShowModal] = useState(false);
  const { t } = useTranslation();
  const [code, setCode] = useState('');
  const [seconds, setSeconds] = useState(45);
  const theme = useTheme();

  useEffect(() => {
    if (seconds > 0) {
      const timer = setTimeout(() => setSeconds(seconds - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [seconds]);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title="Drive Hub" onBack={() => navigation.goBack()} />

      <View style={styles.content}>
        {/* Title */}
        <Text style={[styles.title, { color: theme.text }]}>{t('otp.title')}</Text>

        {/* Subtitle */}
        <Text style={styles.subtitle}>
          {t('otp.subtitle')} <Text style={styles.email}>johndoe@gmail.com</Text>
        </Text>

        {/* Enter Code */}
        <Text style={[styles.label, { color: theme.text }]}>{t('otp.enterCode')}</Text>
        <OTPInput code={code} setCode={setCode} />

        {/* Verify Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('otp.verify')}
            onPress={() => setShowModal(true)}
          />
        </View>

        <ConfirmationModal
          visible={showModal}
          onClose={() => {
            setShowModal(false);
            navigation.replace('PlatformSelection');
          }}
        />

        {/* Did not receive */}
        <Text style={[styles.didnt, { color: theme.text }]}>{t('otp.didntReceive')}</Text>
        {seconds > 0 ? (
          <Text style={styles.timer}>{t('otp.sendAgain', { seconds })}</Text>
        ) : (
          <ResendButton
            title={t('otp.resend')}
            onPress={() => {
              setSeconds(45);
              console.log('Resend OTP triggered');
            }}
          />
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  content: { padding: 20 },
  title: {
    fontSize: 25,
    fontFamily: typography.fontBold,
    marginBottom: 10,
  },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
  },
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    color: '#666',
    marginBottom: 20,
  },
  email: {
    fontFamily: typography.fontBold,
    fontSize: 14,
    color: colors.primary,
  },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    color: colors.textLight,
    marginBottom: 10,
  },
  didnt: {
    fontSize: 15,
    fontFamily: typography.fontBold,
    marginTop: 15,
    alignSelf: 'center',
    width: '100%',
    textAlign: 'center',
  },
  timer: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
    color: '#666',
    marginTop: 10,
    alignSelf: 'center',
    width: '100%',
    textAlign: 'center',
  },
});

export default VerifyOTPScreen;

// ==== src/screens/Automation/index.js ====
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import MainHeader from '../../components/common/MainHeader';
import useTheme from '../../hooks/useTheme';

const AutomationScreen = ({navigation}) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <MainHeader
        onProfilePress={() => navigation.navigate('More')}
        onNotificationPress={() => console.log('Notification pressed')}
        showNotificationDot={true}
      />
      <Text style={{ color: theme.text, marginTop: 20 }}>{t('automation.title')}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
});

export default AutomationScreen;

// ==== src/screens/DoorDash/Auth/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import PrimaryButton from '../../../components/common/PrimaryButton';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import { Images, Icons } from '../../../assets/assets';
import useTheme from '../../../hooks/useTheme';

const DoorDashAuthScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [usePhone, setUsePhone] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('linkDoorDash.title')} />

      {/* Logo */}
      <Image
        source={Images.doorDashOnboarding}
        style={styles.logo}
        resizeMode="contain"
      />

      {/* Subtitle */}
      <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
        {t('linkDoorDash.subtitle')}
      </Text>

      {/* Input Fields */}
      {usePhone ? (
        <>
          <Text style={[styles.inputLabel, { color: theme.text }]}>
            {t('linkDoorDash.phoneLabel')}
          </Text>
          <View style={[styles.inputContainer, { borderColor: theme.border }]}>
            <Image
              source={Icons.phone}
              style={[styles.icon, { tintColor: theme.textSecondary }]}
            />
            <TextInput
              style={[styles.input, { color: theme.text }]}
              placeholder={t('linkDoorDash.phonePlaceholder')}
              placeholderTextColor={theme.textSecondary}
              keyboardType="phone-pad"
            />
          </View>
        </>
      ) : (
        <>
          <Text style={[styles.inputLabel, { color: theme.text }]}>
            {t('linkDoorDash.emailLabel')}
          </Text>
          <View style={[styles.inputContainer, { borderColor: theme.border }]}>
            <Image
              source={Icons.mail}
              style={[styles.icon, { tintColor: theme.textSecondary }]}
            />
            <TextInput
              style={[styles.input, { color: theme.text }]}
              placeholder={t('linkDoorDash.emailPlaceholder')}
              placeholderTextColor={theme.textSecondary}
              keyboardType="email-address"
            />
          </View>

          <Text style={[styles.inputLabel, { color: theme.text }]}>
            {t('linkDoorDash.passwordLabel')}
          </Text>
          <View style={[styles.inputContainer, { borderColor: theme.border }]}>
            <Image
              source={Icons.lock}
              style={[styles.icon, { tintColor: theme.textSecondary }]}
            />
            <TextInput
              style={[styles.input, { color: theme.text }]}
              placeholder={t('linkDoorDash.passwordPlaceholder')}
              placeholderTextColor={theme.textSecondary}
              secureTextEntry={!showPassword}
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              <Image
                source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
                style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
              />
            </TouchableOpacity>
          </View>

          <TouchableOpacity>
            <Text style={styles.forgot}>{t('linkDoorDash.forgot')}</Text>
          </TouchableOpacity>
        </>
      )}

      {/* Continue Button */}
      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('linkDoorDash.continue')}
                  onPress={() => navigation.replace('VerifyDoorDashOTP')}
        />
      </View>

      {/* Switch Login */}
      <TouchableOpacity
        style={styles.footerAlt}
        onPress={() => setUsePhone(!usePhone)}
      >
        <Text style={[styles.footerText, { color: theme.primary }]}>
          {usePhone
            ? t('linkDoorDash.switchToEmail')
            : t('linkDoorDash.switchToPhone')}
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 15 },
  logo: { width: 120, height: 120, alignSelf: 'center', marginVertical: 15 },
  subtitle: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    marginBottom: 10,
  },
  inputLabel: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 4,
    marginBottom: 15,
  },
  icon: { width: 22, height: 22, marginRight: 8 },
  input: { flex: 1, fontSize: 13, fontFamily: typography.fontRegular },
  eyeIcon: { width: 22, height: 22 },
  forgot: {
    fontSize: 12,
    fontFamily: typography.fontMedium,
    color: colors.primary,
    textAlign: 'right',
    marginBottom: 10,
  },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
  footerAlt: {
    marginTop: 'auto',
    marginBottom: 20,
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
  },
  footerText: { fontSize: 14, fontFamily: typography.fontMedium },
});

export default DoorDashAuthScreen;

// ==== src/screens/DoorDash/VerifyOTP/index.js ====
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import DoorDashOTPInput from '../../../components/common/DoorDashOTPInput';
import PrimaryButton from '../../../components/common/PrimaryButton';
import ResendButton from '../../../components/common/ResendButton';
import typography from '../../../theme/typography';
import useTheme from '../../../hooks/useTheme';

const VerifyDoorDashOTPScreen = ({ navigation, route }) => {
  const { t } = useTranslation();
  const [code, setCode] = useState('');
  const [timer, setTimer] = useState(45);
  const [resendAvailable, setResendAvailable] = useState(false);
  const theme = useTheme();

  const { destination, loginType } = route.params || {}; 
  // loginType: "phone" | "email"

  useEffect(() => {
    if (timer > 0) {
      const countdown = setTimeout(() => setTimer(timer - 1), 1000);
      return () => clearTimeout(countdown);
    } else {
      setResendAvailable(true);
    }
  }, [timer]);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('verifyDoorDash.title')} />

      {/* Subtitle */}
      <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
        {loginType === 'phone'
          ? t('verifyDoorDash.subtitleSMS')
          : t('verifyDoorDash.subtitleEmail')}
      </Text>
      <Text style={[styles.highlight, { color: theme.primary }]}>
        {destination}{' '}
        <Text style={{ color: 'red' }}>{t('verifyDoorDash.otpExpire')}</Text>
      </Text>

      {/* OTP */}
      <View style={styles.otpSection}>
        <Text style={[styles.label, { color: theme.text }]}>
          {t('verifyDoorDash.enterCode')}
        </Text>
        <View style={styles.otpInputWrapper}>
          <DoorDashOTPInput code={code} setCode={setCode} length={4} />
        </View>
      </View>

      {/* Verify */}
      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('verifyDoorDash.verify')}
          onPress={() => navigation.replace('SetupAccessibility')}
        />
      </View>

      {/* Resend */}
      <Text style={[styles.didnt, { color: theme.text }]}>
        {t('verifyDoorDash.didNotReceive')}
      </Text>
      {resendAvailable ? (
        <ResendButton
          title={t('verifyDoorDash.resend')}
          onPress={() => {
            setTimer(45);
            setResendAvailable(false);
          }}
          style={styles.resendButton}
        />
      ) : (
        <Text style={[styles.timer, { color: theme.textSecondary }]}>
          {t('verifyDoorDash.sendAgain', { seconds: timer })}
        </Text>
      )}

      {/* Switch Login */}
      <TouchableOpacity style={styles.footerAlt}>
        <Text style={[styles.footerText, { color: theme.primary }]}>
          {loginType === 'phone'
            ? t('verifyDoorDash.switchToEmail')
            : t('verifyDoorDash.switchToPhone')}
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 10 },
  subtitle: { fontSize: 14, fontFamily: typography.fontRegular, marginTop: 10, marginLeft: 10 },
  highlight: { fontSize: 14, fontFamily: typography.fontBold, marginBottom: 20, marginLeft: 10 },
  otpSection: { marginBottom: 10, marginTop: 10, width: '100%' },
  label: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 10, marginLeft: 10 },
  otpInputWrapper: {
    width: '100%',
    alignSelf: 'center',
    alignItems: 'center',
  },
  didnt: { fontSize: 15, fontFamily: typography.fontBold, marginTop: 15, alignSelf: 'center' },
  timer: { fontSize: 13, fontFamily: typography.fontRegular, marginTop: 5, textAlign: 'center' },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
  footerAlt: {
    marginTop: 'auto',
    marginBottom: 20,
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
  },
  footerText: { fontSize: 14, fontFamily: typography.fontMedium },
  resendButton: {
    paddingHorizontal: 20,
    paddingVertical: 14,
    borderWidth: 1,
    borderRadius: 12,
    alignItems: 'center',
    width: '100%',
    marginBottom: 20,
  },
});

export default VerifyDoorDashOTPScreen;
// ==== src/screens/Earning/index.js ====
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import MainHeader from '../../components/common/MainHeader';
import useTheme from '../../hooks/useTheme';

const AutomationScreen = ({navigation}) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <MainHeader
        onProfilePress={() => navigation.navigate('More')}
        onNotificationPress={() => console.log('Notification pressed')}
        showNotificationDot={true}
      />
      <Text style={{ color: theme.text, marginTop: 20 }}>{t('automation.title')}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
});

export default AutomationScreen;

// ==== src/screens/History/index.js ====
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import MainHeader from '../../components/common/MainHeader';
import useTheme from '../../hooks/useTheme';

const HistoryScreen = ({navigation}) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <MainHeader
        onProfilePress={() => navigation.navigate('More')}
        onNotificationPress={() => console.log('Notification pressed')}
        showNotificationDot={true}
      />
      <Text style={{ color: theme.text, marginTop: 20 }}>{t('history.title')}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
});

export default HistoryScreen;

// ==== src/screens/Home/index.js ====
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import MainHeader from '../../components/common/MainHeader';
import useTheme from '../../hooks/useTheme';

const HomeScreen = ({navigation}) => {
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <MainHeader
        onProfilePress={() => navigation.navigate('More')}
        onNotificationPress={() => console.log('Notification pressed')}
        showNotificationDot={true}
      />
      {/* <Text style={{ color: theme.text, marginTop: 20 }}>This is Home Screen</Text> */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
});

export default HomeScreen;

// ==== src/screens/LinkLyft/Auth/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
} from 'react-native';
import { Images, Icons } from '../../../assets/assets';
import typography from '../../../theme/typography';
import colors from '../../../theme/colors';
import PrimaryButton from '../../../components/common/PrimaryButton';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import useTheme from '../../../hooks/useTheme';

const LinkLyftScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const [phone, setPhone] = useState('');
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('linkLyft.title')} />

      <View style={styles.contentContainer}>
        {/* Lyft Logo */}
        <Image source={Images.lyftOnboarding} style={styles.logo} resizeMode="contain" />

        {/* Subtitle */}
        <Text style={styles.subtitle}>{t('linkLyft.subtitle')}</Text>

        {/* Input Label */}
        <Text style={[styles.inputLabel, { color: theme.text }]}>
          {t('linkLyft.inputLabel')}
        </Text>

        {/* Phone Input */}
        <View style={styles.inputContainer}>
          <Image source={Icons.phone} style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder={t('linkLyft.placeholder')}
            placeholderTextColor="#999"
            keyboardType="phone-pad"
            value={phone}
            onChangeText={setPhone}
          />
        </View>

        {/* Continue Button */}
        <View style={styles.primaryButtonWrapper}>
          <PrimaryButton
            title={t('linkLyft.continue')}
            onPress={() =>
              navigation.navigate('VerifyLyftOTP', {
                destination: phone || '(973) 281-6376',
              })
            }
          />
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  contentContainer: { flex: 1, paddingHorizontal: 20 },
  logo: {
    width: 120,
    height: 120,
    alignSelf: 'center',
    marginVertical: 15,
  },
  subtitle: {
    fontSize: 15,
    fontFamily: typography.fontRegular,
    color: '#666',
    marginBottom: 10,
  },
  inputLabel: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    color: colors.textLight,
    marginBottom: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 4,
  },
  icon: {
    width: 22,
    height: 22,
    tintColor: '#888',
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
  },
  primaryButtonWrapper: {
    width: '100%',
    alignSelf: 'center',
    marginTop: 20,
  },
});

export default LinkLyftScreen;

// ==== src/screens/LinkLyft/License/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Image,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import PrimaryButton from '../../../components/common/PrimaryButton';
import typography from '../../../theme/typography';
import { Icons } from '../../../assets/assets'; // license.png
import useTheme from '../../../hooks/useTheme';

const LinkLyftLicenseScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [license, setLicense] = useState('');

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('linkLyft.title')} />

      {/* Subtitle */}
      <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
        {t('linkLyftLicense.subtitle')}
      </Text>

      {/* Input Label */}
      <Text style={[styles.inputLabel, { color: theme.text }]}>
        {t('linkLyftLicense.inputLabel')}
      </Text>

      {/* Input */}
      <View style={[styles.inputContainer, { borderColor: theme.border }]}>
        <Image source={Icons.license} style={[styles.icon, { tintColor: theme.textSecondary }]} />
        <TextInput
          style={[styles.input, { color: theme.text }]}
          placeholder={t('linkLyftLicense.placeholder')}
          placeholderTextColor={theme.textSecondary}
          value={license}
          onChangeText={setLicense}
        />
      </View>

      {/* Continue */}
      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('linkLyftLicense.continue')}
          disabled={!license.trim()}
          onPress={() => navigation.replace('SetupAccessibility')}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 15 },
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginVertical: 15,
  },
  inputLabel: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 8,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 4,
    marginBottom: 20,
  },
  icon: { width: 22, height: 22, marginRight: 8 },
  input: { flex: 1, fontSize: 13, fontFamily: typography.fontRegular },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
});

export default LinkLyftLicenseScreen;

// ==== src/screens/LinkLyft/VerifyOTP/index.js ====
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import LyftOTPInput from '../../../components/common/LyftOTPInput';
import PrimaryButton from '../../../components/common/PrimaryButton';
import ResendButton from '../../../components/common/ResendButton';
import typography from '../../../theme/typography';
import useTheme from '../../../hooks/useTheme';

const VerifyLyftOTPScreen = ({ navigation, route }) => {
  const { t } = useTranslation();
  const [code, setCode] = useState('');
  const [timer, setTimer] = useState(45);
  const [resendAvailable, setResendAvailable] = useState(false);
  const theme = useTheme();

  const destination = route.params?.destination || '(973) 281-6376';

  // Timer countdown
  useEffect(() => {
    if (timer > 0) {
      const countdown = setTimeout(() => setTimer(timer - 1), 1000);
      return () => clearTimeout(countdown);
    } else {
      setResendAvailable(true);
    }
  }, [timer]);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('linkLyft.title')} />

      {/* Subtitle */}
      <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
        {t('verifyLyft.subtitle')}
      </Text>
      <Text style={[styles.highlight, { color: theme.primary }]}>
        {destination}
      </Text>

      {/* OTP Input */}
      <View style={styles.otpSection}>
        <Text style={[styles.label, { color: theme.text }]}>
          {t('verifyLyft.enterCode')}
        </Text>
        
        <LyftOTPInput code={code} setCode={setCode} />
      </View>

      {/* Verify Button */}
      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('verifyLyft.verify')}
          onPress={() => navigation.replace('LinkLyftLicense')}
        />
      </View>

      {/* Resend Logic */}
      <Text style={[styles.didnt, { color: theme.text }]}>
        {t('verifyLyft.didNotReceive')}
      </Text>
      {resendAvailable ? (
        <ResendButton
          title={t('verifyLyft.resend')}
          onPress={() => {
            setTimer(45);
            setResendAvailable(false);
          }}
          style={styles.resendButton}
        />
      ) : (
        <Text style={[styles.timer, { color: theme.textSecondary }]}>
          {t('verifyLyft.sendAgain', { seconds: timer })}
        </Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 10 },
  subtitle: { fontSize: 14, fontFamily: typography.fontRegular, marginTop: 10, marginLeft: 10 },
  highlight: { fontSize: 14, fontFamily: typography.fontBold, marginBottom: 20, marginLeft: 10 },
  otpSection: { marginBottom: 10, marginTop: 10, width: '100%' },
  label: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 10, marginLeft: 10 },
  didnt: { fontSize: 15, fontFamily: typography.fontBold, marginTop: 15, alignSelf: 'center' },
  timer: { fontSize: 13, fontFamily: typography.fontRegular, marginTop: 5, textAlign: 'center' },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
  resendButton: {
    paddingHorizontal: 20,
    paddingVertical: 14,
    borderWidth: 1,
    borderRadius: 12,
    alignItems: 'center',
    width: '100%',
    marginBottom: 20,
  },
});

export default VerifyLyftOTPScreen;

// ==== src/screens/More/Options/About/index.js ====
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const AboutScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={{ flex: 1, backgroundColor: theme.background }}>
      {/* Header - No padding affecting it */}
      <AppHeader title={t('more.options.about.title')} />

      {/* Content */}
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={[styles.text, { color: theme.text }]}>
          Welcome to Drive Hub – the smarter way to move. Whether it’s your daily commute, a night out, 
          or a last-minute trip, Drive Hub is here to make your ride seamless, transparent, and stress-free.
        </Text>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  content: { padding: 16 },
  text: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    lineHeight: 22,
  },
});

export default AboutScreen;

// ==== src/screens/More/Options/AddCard/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import AddCardSuccessModal from '../../../../components/more/AddCardSuccessModal';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const AddCardScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const [holderName, setHolderName] = useState('');
  const [cardNumber, setCardNumber] = useState('');
  const [expiry, setExpiry] = useState('');
  const [cvc, setCvc] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  const theme = useTheme();

  const handleAddCard = () => {
    // ✅ Normally API call here
    setModalVisible(true);
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('more.modals.addCard.title')} />

      {/* Content */}
      <View style={styles.content}>
        {/* Card holder */}
        <Text style={[styles.label, { color: theme.text }]}>
          {t('more.modals.addCard.holderName')}
        </Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
          placeholder={t('more.modals.addCard.holderName')}
          placeholderTextColor={theme.textSecondary}
          value={holderName}
          onChangeText={setHolderName}
        />

        {/* Card Number */}
        <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.addCard.number')}</Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
          placeholder={t('more.modals.addCard.number')}
          placeholderTextColor={theme.textSecondary}
          keyboardType="numeric"
          value={cardNumber}
          onChangeText={setCardNumber}
        />

        {/* Expiry + CVC */}
        <View style={styles.row}>
          <View style={styles.half}>
            <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.addCard.expiry')}</Text>
            <TextInput
              style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
              placeholder={t('more.modals.addCard.expiry')}
              placeholderTextColor={theme.textSecondary}
              value={expiry}
              onChangeText={setExpiry}
            />
          </View>
          <View style={styles.half}>
            <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.addCard.cvc')}</Text>
            <TextInput
              style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
              placeholder={t('more.modals.addCard.cvc')}
              placeholderTextColor={theme.textSecondary}
              value={cvc}
              onChangeText={setCvc}
            />
          </View>
        </View>

        <View style={styles.btnWrapper}>
          <PrimaryButton title={t('more.modals.addCard.button')} onPress={handleAddCard} />
        </View>
      </View>

      {/* Success Modal */}
      <AddCardSuccessModal
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          navigation.goBack();
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { flex: 1, padding: 16 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 6,
  },
  input: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 12,
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginBottom: 16,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  half: {
    flex: 1,
    marginRight: 8,
  },
  btnWrapper: {
    width: '100%',
    marginTop: 'auto',
    marginBottom: 20,
  },
});

export default AddCardScreen;

// ==== src/screens/More/Options/Announcement/index.js ====
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const AnnouncementScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('more.options.updates.title')} />

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        <Text style={[styles.heading, { color: theme.text }]}>Announcements</Text>
        <Text style={[styles.paragraph, { color: theme.textSecondary }]}>
          Welcome to the Announcements section! Here’s where we share important news and highlights
          with you: Launch of new services and ride options, special promotions, seasonal discounts,
          and rewards, expansion into new cities or service areas, policy changes or safety
          guidelines, and community programs and partnerships.
        </Text>

        <Text style={[styles.heading, { color: theme.text }]}>Updates</Text>
        <Text style={[styles.paragraph, { color: theme.textSecondary }]}>
          The Updates section is your space to see what’s new inside the app. Every update is
          designed to improve your journey.
        </Text>
        <Text style={[styles.paragraph, { color: theme.textSecondary }]}>
          Added new features to enhance ride booking, improved app speed and performance, fixed
          minor bugs for smoother trips, strengthened security and rider safety, polished design for
          a cleaner look. Keep your app updated to enjoy the best version of Drive Hub at all times.
        </Text>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 16 },
  heading: {
    fontSize: 16,
    fontFamily: typography.fontSemiBold,
    marginTop: 16,
    marginBottom: 8,
  },
  paragraph: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    lineHeight: 20,
    marginBottom: 10,
  },
});

export default AnnouncementScreen;
// ==== src/screens/More/Options/Cards/index.js ====
import React, { useState } from 'react';
import { View, StyleSheet, FlatList } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import CardItem from '../../../../components/more/CardItem';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';
import DeleteCardModal from '../../../../components/more/DeleteCardModal';

const CardsScreen = ({ navigation })  => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [deleteModalVisible, setDeleteModalVisible] = useState(false);
  const [selectedCardId, setSelectedCardId] = useState(null);

  const [cards, setCards] = useState([
    { id: '1', name: 'John Doe', number: 'xxxx xxxx xxxx 3214' },
    { id: '2', name: 'Jane Doe', number: 'xxxx xxxx xxxx 9876' },
  ]);

  const handleDeleteConfirm = () => {
    if (selectedCardId) {
      setCards(prev => prev.filter(card => card.id !== selectedCardId));
      setSelectedCardId(null); // reset
    }
    setDeleteModalVisible(false);
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('cards.title')} />

      {/* Cards List */}
      <FlatList
        data={cards}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <CardItem
            name={item.name}
            maskedNumber={item.number}
            onEdit={() => navigation.navigate('EditCard', { card: item })}
            onDelete={() => {
                console.log("Delete pressed for:", item.id);

              setSelectedCardId(item.id);  // ✅ store card id
              setDeleteModalVisible(true); // ✅ show modal
            }}
          />
        )}
        contentContainerStyle={{ paddingVertical: 10 }}
      />

      {/* Add New Card */}
      <View style={styles.btnWrapper}>
        <PrimaryButton
          title={t('cards.addNew')}
          onPress={() => navigation.navigate('AddCard')}
        />
      </View>

      {/* Delete Modal */}
      <DeleteCardModal
        visible={deleteModalVisible}
        onClose={() => {
          setDeleteModalVisible(false);
          setSelectedCardId(null);
        }}
        onConfirm={handleDeleteConfirm}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  btnWrapper: {
    margin: 20,
  },
});

export default CardsScreen;

// ==== src/screens/More/Options/EditCard/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import EditCardSuccessModal from '../../../../components/more/EditCardSuccessModal';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const EditCardScreen = ({ route, navigation }) => {
  const { t } = useTranslation();
  const { card } = route.params; // ✅ data passed from CardsScreen
  const [holderName, setHolderName] = useState(card.name);
  const [cardNumber, setCardNumber] = useState(card.number);
  const [expiry, setExpiry] = useState(card.expiry || '');
  const [cvc, setCvc] = useState(card.cvc || '');
  const [modalVisible, setModalVisible] = useState(false);

  const theme = useTheme();

  const handleUpdateCard = () => {
    setModalVisible(true);
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('more.modals.editCard.title')} />

      <View style={styles.content}>
        {/* Card holder */}
        <Text style={[styles.label, { color: theme.text }]}>
          {t('more.modals.editCard.holderName')}
        </Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
          placeholder={t('more.modals.editCard.holderName')}
          placeholderTextColor={theme.textSecondary}
          value={holderName}
          onChangeText={setHolderName}
        />

        {/* Card Number */}
        <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.editCard.number')}</Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
          placeholder={t('more.modals.editCard.number')}
          placeholderTextColor={theme.textSecondary}
          value={cardNumber}
          onChangeText={setCardNumber}
        />

        {/* Expiry + CVC */}
        <View style={styles.row}>
          <View style={styles.half}>
            <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.editCard.expiry')}</Text>
            <TextInput
              style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
              placeholder={t('more.modals.editCard.expiry')}
              placeholderTextColor={theme.textSecondary}
              value={expiry}
              onChangeText={setExpiry}
            />
          </View>
          <View style={styles.half}>
            <Text style={[styles.label, { color: theme.text }]}>{t('more.modals.editCard.cvc')}</Text>
            <TextInput
              style={[styles.input, { color: theme.text, borderColor: theme.border, backgroundColor: theme.card }]}
              placeholder={t('more.modals.editCard.cvc')}
              placeholderTextColor={theme.textSecondary}
              value={cvc}
              onChangeText={setCvc}
            />
          </View>
        </View>

        {/* Button */}
        <View style={styles.btnWrapper}>
          <PrimaryButton title={t('more.modals.editCard.button')} onPress={handleUpdateCard} />
        </View>
      </View>

      {/* Success Modal */}
      <EditCardSuccessModal
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          navigation.goBack();
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { flex: 1, padding: 16 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 6,
  },
  input: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 12,
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginBottom: 16,
  },
  row: { flexDirection: 'row', justifyContent: 'space-between' },
  half: { flex: 1, marginRight: 8 },
  btnWrapper: { width: '100%', marginTop: 'auto', marginBottom: 20 },
});

export default EditCardScreen;

// ==== src/screens/More/Options/FAQ/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image, FlatList } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import { Icons } from '../../../../assets/assets';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const faqData = [
  {
    id: '1',
    question: 'How do I book a ride on Drive Hub?',
    answer: 'To book a ride, open the app, select your destination, and confirm the request.',
  },
  {
    id: '2',
    question: 'How can drivers join Drive Hub?',
    answer: 'Drivers can join by signing up through the app and uploading their vehicle details.',
  },
  {
    id: '3',
    question: 'How do I contact support?',
    answer: 'You can contact support via the “More” section under “Contact Support”.',
  },
  {
    id: '4',
    question: 'How is the fare calculated?',
    answer: 'Fares are calculated based on time, distance, and surge pricing when applicable.',
  },
];

const FAQScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [expanded, setExpanded] = useState(null);

  const toggleExpand = (id) => {
    setExpanded(expanded === id ? null : id);
  };

  const renderItem = ({ item }) => {
    const isOpen = expanded === item.id;
    return (
      <View style={[styles.item, { borderBottomColor: theme.border }]}>
        <TouchableOpacity style={styles.questionRow} onPress={() => toggleExpand(item.id)}>
          <Text style={[styles.question, { color: theme.text }]}>{item.question}</Text>
          <Image
            source={isOpen ? Icons.faqStress : Icons.faqExpand}
            style={[styles.icon, { tintColor: theme.text }]}
          />
        </TouchableOpacity>
        {isOpen && <Text style={[styles.answer, { color: theme.textSecondary }]}>{item.answer}</Text>}
      </View>
    );
  };

  return (
    <View style={{ flex: 1, backgroundColor: theme.background }}>
      {/* Header - No padding affecting it */}
      <AppHeader title={t('more.options.faq.title')} />

      {/* Content */}
      <View style={styles.container}>
        {/* FAQ Intro */}
        <Text style={[styles.heading, { color: theme.text }]}>Frequently Asked Questions</Text>
        <Text style={[styles.subHeading, { color: theme.textSecondary }]}>
          Have a question about Drive Hub? Find the answers here!
        </Text>

        {/* FAQ List */}
        <FlatList
          data={faqData}
          renderItem={renderItem}
          keyExtractor={(item) => item.id}
          contentContainerStyle={{ paddingBottom: 20 }}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 16 },
  heading: {
    fontSize: 16,
    fontFamily: typography.fontSemiBold,
    marginTop: 16,
  },
  subHeading: {
    fontSize: 13,
    fontFamily: typography.fontRegular,
    marginBottom: 16,
  },
  item: {
    borderBottomWidth: 1,
    paddingVertical: 12,
  },
  questionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  question: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    flex: 1,
    marginRight: 8,
  },
  answer: {
    marginTop: 6,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  icon: {
    width: 18,
    height: 18,
  },
});

export default FAQScreen;

// ==== src/screens/More/Options/Language/index.js ====
import React, { useState } from 'react';
import { View, StyleSheet, useColorScheme } from 'react-native';
import { Icons } from '../../../../assets/assets';
import typography from '../../../../theme/typography';
import colors from '../../../../theme/colors';
import LanguageOption from '../../../../components/common/LanguageOption';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import AsyncStorage from '@react-native-async-storage/async-storage';
import i18n from '../../../../localization/i18n';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../../components/common/AppHeader';

const LanguageMoreScreen = ({ navigation }) => {
  const scheme = useColorScheme();
  const { t } = useTranslation();
  const [selected, setSelected] = useState(null);

  const languages = [
    { key: 'en', label: 'English', flag: Icons.flagUK },
    { key: 'es', label: 'Spanish', flag: Icons.flagSpain },
    { key: 'tr', label: 'Turkish', flag: Icons.flagTurkey },
  ];

  return (
    <View style={[styles.container, { backgroundColor: scheme === 'dark' ? '#000' : '#fff' }]}>
      {/* ✅ Use common AppHeader */}
      <AppHeader title={t('select_language')} />

      {/* Language Options */}
      <View style={styles.optionsWrapper}>
        {languages.map(lang => (
          <LanguageOption
            key={lang.key}
            flag={lang.flag}
            label={lang.label}
            selected={selected === lang.key}
            onPress={() => setSelected(lang.key)}
          />
        ))}
      </View>

      {/* Bottom Button */}
      <View style={styles.bottomButton}>
        <PrimaryButton
          title={t('select')}
          onPress={async () => {
            try {
              await AsyncStorage.setItem('appLanguage', selected);
              await i18n.changeLanguage(selected);
            } catch (e) {
              console.log('Error saving language:', e);
            }
            navigation.navigate('More'); // ✅ back to More screen
          }}
          disabled={!selected}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  optionsWrapper: {
    flex: 1,
    paddingHorizontal: 0,
    paddingVertical: 0,
    marginTop: 10,
  },
  bottomButton: {
    marginBottom: 40,
    marginHorizontal: 6,
  },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
    color: colors.textLight,
  },
});

export default LanguageMoreScreen;

// ==== src/screens/More/Options/Plans/index.js ====
import React, { useState, useMemo } from 'react';
import { View, ScrollView, StyleSheet } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import useTheme from '../../../../hooks/useTheme';
import typography from '../../../../theme/typography';

// components in this feature
import MasterPlanHero from '../../../../components/plans/MasterPlanHero';
import PlanOptionCard from '../../../../components/plans/PlanOptionCard';
import PerkItem from '../../../../components/plans/PerkItem';
import AutoRenewRow from '../../../../components/plans/AutoRenewRow';
import PrimaryButton from '../../../../components/common/PrimaryButton'; // use your existing primary button
import RestorePurchaseButton from '../../../../components/plans/RestorePurchaseButton';

const PlansScreen = ({ navigation }) => {
  const theme = useTheme();
  const [selectedPlan, setSelectedPlan] = useState('yearly'); // 'yearly' | 'monthly'

  const yearlyPerks = useMemo(() => ([
    { iconKey: 'priority',  title: 'Priority Rides',      subtitle: 'Always Get Faster Driver Matches' },
    { iconKey: 'fees',      title: 'Lower Service Fees',  subtitle: 'Save More On Every Trip' },
    { iconKey: 'discounts', title: 'Exclusive Discounts', subtitle: 'Special Offers On Long Rides/Peak Hour' },
    { iconKey: 'vouchers',  title: 'Free Rider Vouchers', subtitle: 'Bonus Vouchers Included Every Quarter' },
  ]), []);

  const monthlyPerks = useMemo(() => ([
    { iconKey: 'priority',  title: 'Priority Matching',   subtitle: 'Faster Rider Confirmation In Busy Hour' },
    { iconKey: 'fees',      title: 'Reduced Service Fees',subtitle: 'Save A Little On Every Trip' },
    { iconKey: 'discounts', title: 'Monthly Discounts',   subtitle: 'Special Deals For Regular Riders' },
  ]), []);

  const perks = selectedPlan === 'yearly' ? yearlyPerks : monthlyPerks;
  const autoRenewText =
    selectedPlan === 'yearly'
      ? 'Auto-renews Yearly for $90.99'
      : 'Auto-renews Monthly for $19.99';

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title="Subscription" onBack={() => navigation.goBack()} />
      <ScrollView contentContainerStyle={styles.content} showsVerticalScrollIndicator={false}>

        <MasterPlanHero
          title="Master Plan"
          description="Simplify your workflow with faster logging tools and customizable settings—try it free for 7 days."
        />

        {/* YEARLY CARD */}
        <PlanOptionCard
          title="Yearly Plan"
          description="Go Premium Yearly—unlock unlimited features, exclusive tools, and priority perks."
          billedNote="$90.00 billed annually"
          priceMain="7.60"
          priceUnit="/ Month"
          badgeText="Save 67%"
          selected={selectedPlan === 'yearly'}
          onPress={() => setSelectedPlan('yearly')}
        />

        {/* MONTHLY CARD */}
        <PlanOptionCard
          title="Monthly Plan"
          description="Go Premium Monthly—unlock unlimited features, exclusive tools, and priority perks."
          billedNote="Billed monthly"
          priceMain="19.99"
          priceUnit="/ Month"
          selected={selectedPlan === 'monthly'}
          onPress={() => setSelectedPlan('monthly')}
        />

        {/* PERKS (driven by selectedPlan) */}
        {/* PERKS (driven by selectedPlan) */}
<View style={{ marginTop: 16, marginBottom: 8 }}>
  {/* ADD THIS HEADING TEXT HERE */}
  <TextAuto style={[styles.perksHeading, { color: theme.text }]}>
    {selectedPlan === 'yearly' ? 'Yearly Plan Helps You:' : 'Monthly Plan Helps You:'}
  </TextAuto>
  
  {perks.map(p => (
    <PerkItem
      key={p.title}
      iconKey={p.iconKey}
      title={p.title}
      subtitle={p.subtitle}
    />
  ))}
</View>

        {/* AUTO-RENEW (driven by selectedPlan) */}
        <AutoRenewRow text={autoRenewText} />

        <PrimaryButton title="Subscribe" onPress={() => { /* start purchase */ }} style={{ marginTop: 12 }} />
        <RestorePurchaseButton onPress={() => { /* restore flow */ }} />

        <View style={styles.footnoteWrap}>
          <TextAuto style={[styles.footnote, { color: theme.textSecondary }]}>
            Billing starts at the end of your 7-day free trial unless you cancel. Plans renew automatically.
            Cancel via the App Store / Play Store.
          </TextAuto>
        </View>

      </ScrollView>
    </View>
  );
};
// small helper to avoid importing Text everywhere with same font
import { Text } from 'react-native';
const TextAuto = ({ style, children, ...rest }) => {
  return <Text style={[{ fontFamily: typography.fontRegular }, style]} {...rest}>{children}</Text>;
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 16, paddingBottom: 20 },
  footnoteWrap: { marginTop: 14, marginBottom: 24 },
  footnote: { fontSize: 12, lineHeight: 18, textAlign: 'center' },
  perksHeading: { 
    fontSize: 18, 
    fontFamily: typography.fontSemiBold, 
    marginBottom: 12, 
    marginTop: -20   ,
  },
});

export default PlansScreen;

// ==== src/screens/More/Options/Privacy/index.js ====
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const PrivacyScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={{ flex: 1, backgroundColor: theme.background }}>
      {/* Header - No padding affecting it */}
      <AppHeader title={t('more.options.privacy.title')} />

      {/* Content */}
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={[styles.text, { color: theme.text }]}>
          At Drive Hub, your privacy and trust matter to us. We explain how we collect, use, and protect 
          your data when you use our services. Information we collect includes profile details, location 
          data, and payment information – used only to enhance your ride experience.
        </Text>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  content: { padding: 16 },
  text: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    lineHeight: 22,
  },
});

export default PrivacyScreen;

// ==== src/screens/More/Options/Profile/EditProfile/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import { launchImageLibrary } from 'react-native-image-picker';
import { Icons } from '../../../../../assets/assets';
import typography from '../../../../../theme/typography';
import PrimaryButton from '../../../../../components/common/PrimaryButton'; 
import ResendButton from '../../../../../components/common/ResendButton'; 
import AppHeader from '../../../../../components/common/AppHeader';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../../hooks/useTheme';

const EditProfileScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [avatar, setAvatar] = useState(null);

  const pickImage = () => {
    launchImageLibrary({ mediaType: 'photo' }, (response) => {
      if (response.assets && response.assets.length > 0) {
        setAvatar(response.assets[0].uri);
      }
    });
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('editProfile.title')} onBack={() => navigation.goBack()} />

      <ScrollView contentContainerStyle={styles.scroll}>
        {/* Avatar */}
        <TouchableOpacity onPress={pickImage} style={styles.avatarContainer}>
          {avatar ? (
            <Image source={{ uri: avatar }} style={styles.avatar} />
          ) : (
            <Image source={Icons.camera} style={styles.cameraIcon} />
          )}
        </TouchableOpacity>

        {/* Full Name */}
        <Text style={[styles.label, { color: theme.text }]}>{t('editProfile.fullname')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.person} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="John Doe"
            placeholderTextColor={theme.textSecondary}
          />
        </View>

        {/* Phone */}
        <Text style={[styles.label, { color: theme.text }]}>{t('editProfile.phone')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.phone} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="+1 555 010 1234"
            placeholderTextColor={theme.textSecondary}
            keyboardType="phone-pad"
          />
        </View>

        {/* Email */}
        <Text style={[styles.label, { color: theme.text }]}>{t('editProfile.email')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.mail} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder="johndoe@gmail.com"
            placeholderTextColor={theme.textSecondary}
            keyboardType="email-address"
          />
        </View>

        {/* Vehicle Info */}
        <View style={styles.row}>
          <View style={{ flex: 1, marginRight: 5 }}>
            <Text style={[styles.label, { color: theme.text }]}>{t('editProfile.vehicleName')}</Text>
            <View style={[styles.inputContainer, { borderColor: theme.border }]}>
              <Image source={Icons.vehicle} style={[styles.icon, { tintColor: theme.textSecondary }]} />
              <TextInput
                style={[styles.input, { color: theme.text }]}
                placeholder="Toyota Camry"
                placeholderTextColor={theme.textSecondary}
              />
            </View>
          </View>
          <View style={{ flex: 1, marginLeft: 5 }}>
            <Text style={[styles.label, { color: theme.text }]}>{t('editProfile.vehicleModel')}</Text>
            <View style={[styles.inputContainer, { borderColor: theme.border }]}>
              <Image source={Icons.calendar} style={[styles.icon, { tintColor: theme.textSecondary }]} />
              <TextInput
                style={[styles.input, { color: theme.text }]}
                placeholder="2021"
                placeholderTextColor={theme.textSecondary}
              />
            </View>
          </View>
        </View>
{/* Buttons */}
<View style={styles.buttonsWrapper}>
  <ResendButton
    title={t('editProfile.resetPassword')}
       onPress={() => navigation.navigate('ResetPasswordMore')}
  />

  <PrimaryButton
    title={t('editProfile.saveChanges')}
    onPress={() => navigation.navigate('Profile')}
  />
</View>


      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  scroll: { padding: 20, paddingBottom: 20 },
  avatarContainer: {
    width: 100,
    height: 100,
    borderRadius: 60,
    alignSelf: 'center',
    marginBottom: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatar: { width: '100%', height: '100%', borderRadius: 60 },
  cameraIcon: { width: 121, height: 121 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 5,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 3,
    paddingHorizontal: 12,
    marginBottom: 5,
  },
  icon: { width: 20, height: 20, marginRight: 10 },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
buttonsWrapper: {
  marginTop: 100,   // ⬅ increase this
},

  saveBtnWrapper: {
    alignItems: 'center',
    width: '100%', // Make button take full width of the container
  },
  row: { flexDirection: 'row', justifyContent: 'space-between' },
});

export default EditProfileScreen;

// ==== src/screens/More/Options/Profile/ResetPasswordScreen/index.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import AppHeader from '../../../../../components/common/AppHeader';
import PrimaryButton from '../../../../../components/common/PrimaryButton';
import typography from '../../../../../theme/typography';
import colors from '../../../../../theme/colors';
import { Icons } from '../../../../../assets/assets';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../../hooks/useTheme';
import ResetSuccessModal from '../../../../../components/more/ResetSuccessModal';

const ResetPasswordScreenMore = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);

  const handleReset = () => {
    // Normally API call here
    setModalVisible(true);
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header - no padding */}
      <AppHeader title={t('resetPassword.title')} onBack={() => navigation.goBack()} />

      {/* Content with padding */}
      <View style={styles.content}>
        <Text style={styles.subtitle}>{t('resetPassword.subtitle')}</Text>

        {/* Password */}
        <Text style={[styles.label, { color: theme.text }]}>{t('resetPassword.password')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder={t('resetPassword.password')}
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showPassword}
            value={password}
            onChangeText={setPassword}
          />
          <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
            <Image
              source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Confirm Password */}
        <Text style={[styles.label, { color: theme.text }]}>{t('resetPassword.confirmPassword')}</Text>
        <View style={[styles.inputContainer, { borderColor: theme.border }]}>
          <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
          <TextInput
            style={[styles.input, { color: theme.text }]}
            placeholder={t('resetPassword.confirmPassword')}
            placeholderTextColor={theme.textSecondary}
            secureTextEntry={!showConfirmPassword}
            value={confirmPassword}
            onChangeText={setConfirmPassword}
          />
          <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
            <Image
              source={showConfirmPassword ? Icons.eyeOpen : Icons.eyeClose}
              style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
            />
          </TouchableOpacity>
        </View>

        {/* Button */}
        <View style={styles.btnWrapper}>
          <PrimaryButton title={t('resetPassword.title')} onPress={handleReset} />
        </View>
      </View>

      {/* Modal */}
      <ResetSuccessModal
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          navigation.goBack();
        }}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 }, // no padding here
  content: { flex: 1, padding: 16 }, // ✅ content has padding
  subtitle: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    color: colors.secondary,
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontFamily: typography.fontMedium,
    marginBottom: 6,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    marginBottom: 15,
  },
  icon: { width: 20, height: 20, marginRight: 10 },
  input: {
    flex: 1,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  eyeIcon: { width: 20, height: 20 },
  btnWrapper: { marginTop: 'auto', marginBottom: 20 },
});

export default ResetPasswordScreenMore;

// ==== src/screens/More/Options/Profile/index.js ====
import React from 'react';
import { View, Text, StyleSheet, Image, ScrollView } from 'react-native';
import ProfileHeader from '../../../../components/more/ProfileHeader';
import { Icons } from '../../../../assets/assets';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const ProfileScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <ProfileHeader
        title={t('profile.title')}
        onBack={() => navigation.goBack()}
        onEdit={() => navigation.navigate('EditProfile')}
      />

     <ScrollView contentContainerStyle={styles.content}>
  {/* Avatar */}
  <View style={styles.avatarWrapper}>
    <Image source={Icons.avatar} style={styles.avatar} resizeMode="contain" />
  </View>

  {/* Fields */}
  <View style={styles.fieldWrapper}>
    <Text style={[styles.label, { color: theme.text }]}>{t('profile.fullname')}</Text>
    <View style={styles.row}>
      <Image source={Icons.person} style={styles.icon} />
      <Text style={[styles.value, { color: theme.textSecondary }]}>John Diaz</Text>
    </View>
    <View style={styles.divider} />   {/* ✅ Divider */}
  </View>

  <View style={styles.fieldWrapper}>
    <Text style={[styles.label, { color: theme.text }]}>{t('profile.phone')}</Text>
    <View style={styles.row}>
      <Image source={Icons.phone} style={styles.icon} />
      <Text style={[styles.value, { color: theme.textSecondary }]}>+1 (555) 010-1234</Text>
    </View>
    <View style={styles.divider} />   {/* ✅ Divider */}
  </View>

  <View style={styles.fieldWrapper}>
    <Text style={[styles.label, { color: theme.text }]}>{t('profile.email')}</Text>
    <View style={styles.row}>
      <Image source={Icons.mail} style={styles.icon} />
      <Text style={[styles.value, { color: theme.textSecondary }]}>johndiaz@gmail.com</Text>
    </View>
    <View style={styles.divider} />   {/* ✅ Divider */}
  </View>

  <View style={styles.fieldWrapper}>
    <Text style={[styles.label, { color: theme.text }]}>{t('profile.vehicleName')}</Text>
    <View style={styles.row}>
      <Image source={Icons.vehicle} style={styles.icon} />
      <Text style={[styles.value, { color: theme.textSecondary }]}>Toyota Camry</Text>
    </View>
    <View style={styles.divider} />   {/* ✅ Divider */}
  </View>

  <View style={styles.fieldWrapper}>
    <Text style={[styles.label, { color: theme.text }]}>{t('profile.vehicleModel')}</Text>
    <View style={styles.row}>
      <Image source={Icons.calendar} style={styles.icon} />
      <Text style={[styles.value, { color: theme.textSecondary }]}>2021</Text>
    </View>
    <View style={styles.divider} />   {/* ✅ Divider */}
  </View>
</ScrollView>

    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  divider: {
  height: 1,
  backgroundColor: '#E0E0E0',  // light gray line
  marginTop: 10,
},

  content: { padding: 20, paddingBottom: 40 },
  avatarWrapper: { alignItems: 'center' }, 
  avatar: { width: 100, height: 100, borderRadius: 40 },
  fieldWrapper: { marginBottom: 16 },
  label: { fontSize: 15, fontFamily: typography.fontSemiBold, marginBottom: 6 },
  row: { flexDirection: 'row', alignItems: 'center' },
  icon: { width: 24, height: 24, marginRight: 10, tintColor: '#888' },
  value: { fontSize: 14, fontFamily: typography.fontRegular },
});

export default ProfileScreen;

// ==== src/screens/More/Options/ReportIssue/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import SuccessModal from '../../../../components/more/SuccessModal';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const ReportIssueScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [bugDetail, setBugDetail] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <AppHeader title={t('more.modals.reportIssue.title')} />

      {/* Bug Detail */}
      <Text style={[styles.label, { color: theme.text }]}>
        {t('more.modals.reportIssue.bugDetail')}
      </Text>
      <TextInput
        style={[
          styles.textArea,
          { color: theme.text, borderColor: theme.border },
        ]}
        placeholder={t('more.modals.reportIssue.placeholder')}
        placeholderTextColor={theme.textSecondary}
        multiline
        value={bugDetail}
        onChangeText={setBugDetail}
      />

      {/* Report Button */}
      <View style={styles.btnWrapper}>
        <PrimaryButton
          title={t('more.modals.reportIssue.reportBtn')}
          onPress={() => setModalVisible(true)}
        />
      </View>

      {/* Success Modal */}
      <SuccessModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginTop: 20,
    marginBottom: 8,
    paddingHorizontal: 16, // Padding for label and text area
  },
  textArea: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 12,
    fontSize: 13,
    fontFamily: typography.fontRegular,
    height: 120,
    textAlignVertical: 'top',
    marginHorizontal: 16, // Padding for text area
  },
  btnWrapper: {
    marginTop: 'auto',
    marginBottom: 20,
    paddingHorizontal: 16, // Padding for the button
  },
});

export default ReportIssueScreen;

// ==== src/screens/More/Options/Support/index.js ====
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import SuccessModal from '../../../../components/more/SuccessModal';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const ContactSupportScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [name, setName] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  const handleSend = () => {
    setModalVisible(true);
  };

  return (
    <View style={{ flex: 1, backgroundColor: theme.background }}>
      <AppHeader title={t('more.modals.contactSupport.title')} />

      <View style={styles.container}>
        <Text style={[styles.label, { color: theme.text }]}>
          {t('more.modals.contactSupport.name')}
        </Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border }]}
          placeholder={t('more.modals.contactSupport.namePlaceholder')}
          placeholderTextColor={theme.textSecondary}
          value={name}
          onChangeText={setName}
        />

        <Text style={[styles.label, { color: theme.text }]}>
          {t('more.modals.contactSupport.subject')}
        </Text>
        <TextInput
          style={[styles.input, { color: theme.text, borderColor: theme.border }]}
          placeholder={t('more.modals.contactSupport.subjectPlaceholder')}
          placeholderTextColor={theme.textSecondary}
          value={subject}
          onChangeText={setSubject}
        />

        <Text style={[styles.label, { color: theme.text }]}>
          {t('more.modals.contactSupport.message')}
        </Text>
        <TextInput
          style={[styles.input, styles.textArea, { color: theme.text, borderColor: theme.border }]}
          placeholder={t('more.modals.contactSupport.messagePlaceholder')}
          placeholderTextColor={theme.textSecondary}
          multiline
          value={message}
          onChangeText={setMessage}
        />

        <View style={styles.btnWrapper}>
          <PrimaryButton
            title={t('more.modals.contactSupport.sendBtn')}
            onPress={handleSend}
          />
        </View>
      </View>

      <SuccessModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        type="contactSupport"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  label: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    marginTop: 20,
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 12,
    fontSize: 13,
    fontFamily: typography.fontRegular,
  },
  textArea: {
    height: 120,
    textAlignVertical: 'top',
  },
  btnWrapper: {
    marginTop: 'auto',
    marginBottom: 20,
  },
});

export default ContactSupportScreen;

// ==== src/screens/More/Options/Terms/index.js ====
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import AppHeader from '../../../../components/common/AppHeader';
import typography from '../../../../theme/typography';
import { useTranslation } from 'react-i18next';
import useTheme from '../../../../hooks/useTheme';

const TermsScreen = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('more.options.terms.title')} />
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={[styles.text, { color: theme.text }]}>
          By using Drive Hub, you agree to our terms and conditions. These include transparent fares, 
          trusted drivers, and a safe, reliable experience. Please review our policies to understand 
          your rights and responsibilities while using our service.
        </Text>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: { padding: 16 },
  text: {
    fontSize: 14,
    fontFamily: typography.fontRegular,
    lineHeight: 22,
  },
});

export default TermsScreen;

// ==== src/screens/More/Options/Theme/index.js ====
import React, { useState, useEffect } from 'react';
import { View, StyleSheet } from 'react-native';
import { Icons } from '../../../../assets/assets';
import typography from '../../../../theme/typography';
import PrimaryButton from '../../../../components/common/PrimaryButton';
import ThemeOption from '../../../../components/more/ThemeOption';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../../components/common/AppHeader';
import useTheme from '../../../../hooks/useTheme';

const ThemeMoreScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const [selected, setSelected] = useState(null);

  const themes = [
    { key: 'dark', label: t('theme.dark'), icon: Icons.darkMode },
    { key: 'light', label: t('theme.light'), icon: Icons.lightMode },
  ];

  // Load saved theme
  useEffect(() => {
    const loadTheme = async () => {
      const savedTheme = await AsyncStorage.getItem('appTheme');
      setSelected(savedTheme || null);
    };
    loadTheme();
  }, []);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* ✅ Common Header */}
      <AppHeader title={t('theme.title')} />

      {/* Options */}
      <View style={styles.optionsWrapper}>
        {themes.map(th => (
          <ThemeOption
            key={th.key}
            icon={th.icon}
            label={th.label}
            selected={selected === th.key}
            onPress={() => setSelected(th.key)}
          />
        ))}
      </View>

      {/* Bottom Button */}
      <View style={styles.bottomButton}>
        <PrimaryButton
          title={t('select')}
          onPress={async () => {
            try {
              await AsyncStorage.setItem('appTheme', selected);
              console.log('Theme saved:', selected);
            } catch (e) {
              console.log('Error saving theme:', e);
            }
            navigation.navigate('More'); // back to More
          }}
          disabled={!selected}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  optionsWrapper: {
    flex: 1,
    marginTop: 20,
  },
  bottomButton: {
    marginBottom: 40,
    marginHorizontal: 16,
  },
  title: {
    fontSize: 20,
    fontFamily: typography.fontSemiBold,
  },
});

export default ThemeMoreScreen;

// ==== src/screens/More/index.js ====
import React, { useState } from 'react';
import { View, StyleSheet, ScrollView, Text } from 'react-native';
import AppHeader from '../../components/common/AppHeader';
import ProfileOverviewCard from '../../components/more/ProfileOverviewCard';
import MoreOptionCard from '../../components/more/MoreOptionCard';
import ActionModal from '../../components/more/ActionModal';
import useTheme from '../../hooks/useTheme';
import { Icons } from '../../assets/assets';
import { useTranslation } from 'react-i18next';
import typography from '../../theme/typography';

const MoreScreen = ({ navigation }) => {
  const theme = useTheme();
  const { t } = useTranslation();

  const [modalType, setModalType] = useState(null);

  const handleOpenModal = (type) => setModalType(type);
  const handleCloseModal = () => setModalType(null);

  const handleConfirm = () => {
    console.log(`${modalType} confirmed`);
    handleCloseModal();
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('more.title')} />

      <ScrollView showsVerticalScrollIndicator={false}>
        <ProfileOverviewCard onEdit={() => navigation.navigate('Profile')} />

        {/* ---------------- Subscription ---------------- */}
        <Text style={styles.sectionHeader}>{t('more.sections.subscription')}</Text>
        <View style={styles.gridRow}>
          <MoreOptionCard
  icon={Icons.premiumPlan}
  title={t('more.options.premium.title')}
  description={t('more.options.premium.desc')}
  onPress={() => navigation.navigate('Plans')}   // ⬅️ add this
/>

          <MoreOptionCard
            icon={Icons.paymentMethods}
            title={t('more.options.payment.title')}
            description={t('more.options.payment.desc')}
              onPress={() => navigation.navigate('Cards')}

          />
        </View>

        {/* ---------------- Settings ---------------- */}
        <Text style={styles.sectionHeader}>{t('more.sections.settings')}</Text>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.manageFilters}
            title={t('more.options.filters.title')}
            description={t('more.options.filters.desc')}
          />
          <MoreOptionCard
            icon={Icons.notifications}
            title={t('more.options.notifications.title')}
            description={t('more.options.notifications.desc')}
          />
        </View>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.theme}
            title={t('more.options.theme.title')}
            description={t('more.options.theme.desc')}
              onPress={() => navigation.navigate('Theme')}

          />
          <MoreOptionCard
            icon={Icons.language}
            title={t('more.options.language.title')}
            description={t('more.options.language.desc')}
              onPress={() => navigation.navigate('LanguageMore')}
          />
        </View>

        {/* ---------------- Terms ---------------- */}
        <Text style={styles.sectionHeader}>{t('more.sections.terms')}</Text>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.privacy}
            title={t('more.options.privacy.title')}
            description={t('more.options.privacy.desc')}
              onPress={() => navigation.navigate('Privacy')}
            
          />
          <MoreOptionCard
            icon={Icons.about}
            title={t('more.options.about.title')}
            description={t('more.options.about.desc')}
              onPress={() => navigation.navigate('About')}
          />
        </View>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.terms}
            title={t('more.options.terms.title')}
            description={t('more.options.terms.desc')}
              onPress={() => navigation.navigate('Terms')}

          />
        </View>

        {/* ---------------- Help & Support ---------------- */}
        <Text style={styles.sectionHeader}>{t('more.sections.support')}</Text>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.faq}
            title={t('more.options.faq.title')}
            description={t('more.options.faq.desc')}
              onPress={() => navigation.navigate('FAQ')}


          />
          <MoreOptionCard
            icon={Icons.support}
            title={t('more.options.support.title')}
            description={t('more.options.support.desc')}
            onPress={() => navigation.navigate('ContactSupport')}

          />
        </View>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.report}
            title={t('more.options.report.title')}
            description={t('more.options.report.desc')}
            onPress={() => navigation.navigate('ReportIssue')}
          />
          <MoreOptionCard
            icon={Icons.updates}
            title={t('more.options.updates.title')}
            description={t('more.options.updates.desc')}
            onPress={() => navigation.navigate('Announcements')}
          />
        </View>
        {/* Account Management */}
        <Text style={styles.sectionHeader}>{t('more.sections.account')}</Text>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.cache}
            title={t('more.options.cache.title')}
            description={t('more.options.cache.desc')}
            onPress={() => handleOpenModal('cache')}
          />
          <MoreOptionCard
            icon={Icons.delete}
            title={t('more.options.delete.title')}
            description={t('more.options.delete.desc')}
            onPress={() => handleOpenModal('delete')}
          />
        </View>
        <View style={styles.gridRow}>
          <MoreOptionCard
            icon={Icons.logout}
            title={t('more.options.logout.title')}
            description={t('more.options.logout.desc')}
            onPress={() => handleOpenModal('logout')}
          />
        </View>
      </ScrollView>

      {/* Modals */}
      <ActionModal
        visible={modalType === 'logout'}
        onClose={handleCloseModal}
        onConfirm={handleConfirm}
        icon={Icons.logoutModal}
        type="logout"
      />
      <ActionModal
        visible={modalType === 'delete'}
        onClose={handleCloseModal}
        onConfirm={handleConfirm}
        icon={Icons.deleteModal}
        type="delete"
      />
      <ActionModal
        visible={modalType === 'cache'}
        onClose={handleCloseModal}
        onConfirm={handleConfirm}
        icon={Icons.cacheModal}
        type="cache"
      />
    </View>
  );
};


const styles = StyleSheet.create({
  container: { flex: 1 },
  sectionHeader: {
    fontSize: 14,
    fontFamily: typography.fontSemiBold,
    color: 'grey',
    marginLeft: 16,
    marginTop: 10,
    marginBottom: 6,
  },
  gridRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginHorizontal: 4,
  },
});

export default MoreScreen;

// ==== src/screens/Profile/index.js ====

// ==== src/screens/Settings/index.js ====

// ==== src/screens/Splash/index.js ====
import React, { useEffect } from 'react';
import { View, Image, StyleSheet, useColorScheme } from 'react-native';
import { Images } from '../../assets/assets';
import colors from '../../theme/colors';

const SplashScreen = ({ navigation }) => {
  const scheme = useColorScheme(); // Detect light or dark mode

  useEffect(() => {
    const timer = setTimeout(() => {
      navigation.replace('LanguageSelection'); // later change to Login/Home
    }, 2000);
    return () => clearTimeout(timer);
  }, [navigation]);

  return (
    <View
      style={[
        styles.container,
        { backgroundColor: scheme === 'dark' ? colors.backgroundDark : colors.backgroundLight },
      ]}
    >
      <Image
        source={scheme === 'dark' ? Images.logoDark : Images.logoLight}
        style={styles.logo}
        resizeMode="contain"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 200,
    height: 80,
  },
});

export default SplashScreen;

// ==== src/screens/Uber/Auth/LinkUberPasswordScreen.js ====
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Image,
  TouchableOpacity,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import PrimaryButton from '../../../components/common/PrimaryButton';
import VerifyAlternativeModal from '../../../components/common/VerifyAlternativeModal';
import typography from '../../../theme/typography';
import { Icons } from '../../../assets/assets';
import useTheme from '../../../hooks/useTheme';

const LinkUberPasswordScreen = ({ navigation }) => {
  const { t } = useTranslation();
  const [showPassword, setShowPassword] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const theme = useTheme();

  const userName = 'John';

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('linkUber.title')} />

      <Text style={[styles.welcome, { color: theme.textSecondary }]}>
        {t('linkUberPassword.welcome')} <Text style={[styles.bold, { color: theme.text }]}>{userName}</Text>
      </Text>

      <Text style={[styles.inputLabel, { color: theme.text }]}>{t('linkUberPassword.password')}</Text>

      <View style={[styles.inputContainer, { borderColor: theme.border }]}>
        <Image source={Icons.lock} style={[styles.icon, { tintColor: theme.textSecondary }]} />
        <TextInput
          style={[styles.input, { color: theme.text }]}
          placeholder={t('linkUberPassword.password')}
          placeholderTextColor={theme.textSecondary}
          secureTextEntry={!showPassword}
        />
        <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
          <Image
            source={showPassword ? Icons.eyeOpen : Icons.eyeClose}
            style={[styles.eyeIcon, { tintColor: theme.textSecondary }]}
          />
        </TouchableOpacity>
      </View>

      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('linkUberPassword.continue')}
          onPress={() => navigation.replace('SetupAccessibility')}
        />
      </View>

      {/* Try Another Way */}
      <TouchableOpacity style={[styles.footerAlt, { borderColor: theme.primary }]} onPress={() => setModalVisible(true)}>
        <Text style={[styles.footerText, { color: theme.primary }]}>{t('verifyUber.tryAnother')}</Text>
      </TouchableOpacity>

      <VerifyAlternativeModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        destination="you****@gmail.com"
        navigation={navigation}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 15 },
  welcome: { fontSize: 14, fontFamily: typography.fontRegular, marginVertical: 15 },
  bold: { fontFamily: typography.fontBold },
  inputLabel: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 8 },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 4,
    marginBottom: 20,
  },
  icon: { width: 22, height: 22, marginRight: 8 },
  input: { flex: 1, fontSize: 13, fontFamily: typography.fontRegular },
  eyeIcon: { width: 22, height: 22 },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
  footerAlt: {
    marginTop: 'auto',
    marginBottom: 20,
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  footerText: { fontSize: 14, fontFamily: typography.fontMedium },
});

export default LinkUberPasswordScreen;

// ==== src/screens/Uber/VerifyUberOTP/index.js ====
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { useTranslation } from 'react-i18next';
import AppHeader from '../../../components/common/AppHeader';
import UberOTPInput from '../../../components/common/UberOTPInput';
import PrimaryButton from '../../../components/common/PrimaryButton';
import ResendButton from '../../../components/common/ResendButton';
import typography from '../../../theme/typography';
import VerifyAlternativeModal from '../../../components/common/VerifyAlternativeModal';
import useTheme from '../../../hooks/useTheme';

const VerifyUberOTPScreen = ({ navigation, route }) => {
  const { t } = useTranslation();
  const [code, setCode] = useState('');
  const [timer, setTimer] = useState(45);
  const [resendAvailable, setResendAvailable] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const theme = useTheme();

  const destination = route.params?.destination || 'you****z@gmail.com';

  useEffect(() => {
    if (timer > 0) {
      const countdown = setTimeout(() => setTimer(timer - 1), 1000);
      return () => clearTimeout(countdown);
    } else {
      setResendAvailable(true);
    }
  }, [timer]);

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <AppHeader title={t('linkUber.title')} />

      <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
        {t('verifyUber.subtitle')}
      </Text>
      <Text style={[styles.highlight, { color: theme.primary }]}>{destination}</Text>

      <View style={styles.otpSection}>
        <Text style={[styles.label, { color: theme.text }]}>
          {t('verifyUber.enterCode')}
        </Text>
        <UberOTPInput code={code} setCode={setCode} length={4} />
      </View>

      <View style={styles.primaryButtonWrapper}>
        <PrimaryButton
          title={t('verifyUber.verify')}
          onPress={() => navigation.navigate('LinkUberPassword')}
        />
      </View>

      <Text style={[styles.didnt, { color: theme.text }]}>
        {t('verifyUber.didNotReceive')}
      </Text>
      {resendAvailable ? (
        <ResendButton
          title={t('verifyUber.resend')}
          onPress={() => {
            setTimer(45);
            setResendAvailable(false);
          }}
          style={styles.resendButton}
        />
      ) : (
        <Text style={[styles.timer, { color: theme.textSecondary }]}>
          {t('verifyUber.sendAgain', { seconds: timer })}
        </Text>
      )}

      <TouchableOpacity style={styles.footerAlt} onPress={() => setModalVisible(true)}>
        <Text style={[styles.footerText, { color: theme.primary }]}>
          {t('verifyUber.tryAnother')}
        </Text>
      </TouchableOpacity>

      <VerifyAlternativeModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        destination={destination}
        navigation={navigation}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, paddingHorizontal: 10 },
  subtitle: { fontSize: 14, fontFamily: typography.fontRegular, marginTop: 10, marginLeft: 10 },
  highlight: { fontSize: 14, fontFamily: typography.fontBold, marginBottom: 20, marginLeft: 10 },
  otpSection: { marginBottom: 10, marginTop: 10, width: '100%' },
  label: { fontSize: 14, fontFamily: typography.fontMedium, marginBottom: 10, marginLeft: 10 },
  didnt: { fontSize: 15, fontFamily: typography.fontBold, marginTop: 15, alignSelf: 'center' },
  timer: { fontSize: 13, fontFamily: typography.fontRegular, marginTop: 5, textAlign: 'center' },
  primaryButtonWrapper: { width: '100%', alignSelf: 'center' },
  footerAlt: {
    marginTop: 'auto',
    marginBottom: 20,
    
    borderWidth: 1,
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
  },
  footerText: { fontSize: 14, fontFamily: typography.fontMedium },
  resendButton: {
    paddingHorizontal: 20,
    paddingVertical: 14,
    borderWidth: 1,
    borderRadius: 12,
    alignItems: 'center',
    width: '100%',
    marginBottom: 20,
  },
});

export default VerifyUberOTPScreen;

// ==== src/theme/colors.js ====
// src/theme/colors.js

const colors = {
  // Brand colors
  primary: '#007BFF',
  secondary: '#666666',

  // Light theme
  backgroundLight: '#FFFFFF',
  textLight: '#222222',
  borderLight: 'rgba(0,0,0,0.16)',

  // Dark theme
  backgroundDark: '#020202',
  textDark: '#F5F5F5',
  borderDark: 'rgba(255,255,255,0.2)',

  // Utility / state colors
  success: '#28A745',
  danger: '#DC3545',
  warning: '#FFC107',
  info: '#17A2B8',
};

export default colors;

// ==== src/theme/dark.js ====
import colors from './colors';
import typography from './typography';

export default {
  dark: true,
  colors: {
    background: colors.backgroundDark,
    text: colors.textDark,
    primary: colors.primary,
    secondary: colors.secondary,
  },
  fonts: {
    regular: { fontFamily: typography.fontRegular, fontWeight: 'normal' },
    medium: { fontFamily: typography.fontMedium, fontWeight: '500' },
    semibold: { fontFamily: typography.fontSemiBold, fontWeight: '600' },
    bold: { fontFamily: typography.fontBold, fontWeight: 'bold' },
  },
};

// ==== src/theme/darkTheme.js ====
export default {
  background: '#020202',
    bottom_background: '#131313',
  text: '#F5F5F5',
  textSecondary: '#AAAAAA',
  subheading: '#797979',
  overlay: 'rgba(0,0,0,0.6)',
  border: '#333333',
  primary: '#4DA3FF',
  primary_bottom:'#007AFF',
  card: '#111111',
    card_theme: '#131313',
};

// ==== src/theme/light.js ====
import colors from './colors';
import typography from './typography';

export default {
  dark: false,
  colors: {
    background: colors.backgroundLight,
    text: colors.textLight,
    primary: colors.primary,
    secondary: colors.secondary,
  },
  fonts: {
    regular: { fontFamily: typography.fontRegular, fontWeight: 'normal' },
    medium: { fontFamily: typography.fontMedium, fontWeight: '500' },
    semibold: { fontFamily: typography.fontSemiBold, fontWeight: '600' },
    bold: { fontFamily: typography.fontBold, fontWeight: 'bold' },
  },
};

// ==== src/theme/lightTheme.js ====
export default {
  background: '#FFFFFF',
  bottom_background:"#F5F5F5",
  text: '#222222',
  textSecondary: '#666666',
  overlay: 'rgba(255,255,255,0.7)',
  border: '#DDDDDD',
  primary: '#007BFF',
    primary_bottom:'#007AFF',
  card: '#F7F7F7',
    card_theme: '#F7F7F7',
    autoRenewRowBackground: 'rgba(0, 123, 255, 0.2)'

};

// ==== src/theme/typography.js ====
import { Fonts } from '../assets/assets';

console.log('Fonts object:', Fonts);

const typography = {
  fontRegular: Fonts?.regular ?? 'System',
  fontMedium: Fonts?.medium ?? 'System',
  fontSemiBold: Fonts?.semibold ?? 'System',
  fontBold: Fonts?.bold ?? 'System',
};

export default typography;

// ==== src/utils/api.js ====

// ==== src/utils/constants.js ====

// ==== src/utils/helpers.js ====
